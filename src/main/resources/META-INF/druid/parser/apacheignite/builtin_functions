[Aggregate Functions]
AVG     :AVG ([DISTINCT] ?)     :The average (mean) value. If no rows are selected, the result is NULL. Aggregates are only allowed in select statements. The returned value is of the same data type as the parameter.
BIT_AND :BIT_AND (?)            :The bitwise AND of all non-null values.
BIT_OR  :BIT_OR (?)             :The bitwise OR of all non-null values.
COUNT   :COUNT (* | [DISTINCT] expression)  :The count of all entries or of the non-null values.
COUNT   :COUNT (*)                          :The count of all entries or of the non-null values.
COUNT   :COUNT([DISTINCT] ?)                :The count of all entries or of the non-null values.
GROUP_CONCAT                    :GROUP_CONCAT([DISTINCT] expression || [expression || [expression ...]]  [ORDER BY expression [ASC|DESC], [[ORDER BY expression [ASC|DESC]]]  [SEPARATOR expression]):Concatenates strings with a separator.
MAX     :MAX (?)                :Returns the highest value.
MIN     :MIN (?)                :Returns the lowest value.
SUM     :SUM ([DISTINCT] ?)     :Returns the sum of all values.
[Numeric Functions]
ABS     :ABS (?)    :Returns the absolute value of an expression.
ACOS    :ACOS (?)   :Calculates the arc cosine. This method returns a double.
ASIN    :ASIN (?)   :Calculates the arc sine. This method returns a double.
ATAN    :ATAN (?)   :Calculates the arc tangent. This method returns a double.
COS     :COS (?)    :Calculates the trigonometric cosine. This method returns a double.
COSH    :COSH (?)   :Calculates the trigonometric cosine. This method returns a double.
COT     :COT (?)    :Calculates the trigonometric cotangent (1/TAN(ANGLE)). This method returns a double.
SIN     :SIN (?)    :Calculates the trigonometric sine. This method returns a double.
SINH    :SINH (?)   :Calculates the hyperbolic sine. This method returns a double.
TAN     :TAN (?)    :Calculates the trigonometric tangent. This method returns a double.
TANH    :TANH (?)   :Calculates the hyperbolic tangent. This method returns a double.
ATAN2   :ATAN2 (y, x)       :Calculates the angle when converting the rectangular coordinates to polar coordinates. This method returns a double.
BITAND  :BITAND (y, x)      :The bitwise AND operation. This method returns a long.
BITGET  :BITGET (y, x)      :Returns true if and only if the first parameter has a bit set in the position specified by the second parameter. This method returns a boolean. The second parameter is zero-indexed; the least significant bit has position 0.
BITOR   :BITOR (y, x)       :The bitwise OR operation. This method returns a long.
BITXOR  :BITXOR (y, x)      :The bitwise XOR operation. This method returns a long.
MOD     :MOD (y, x)         :The modulo operation. This method returns a long.
CEIL    :CEIL (?)           :See also Java Math.ceil. This method returns a double.
CEILING :CEILING (?)        :See also Java Math.ceil. This method returns a double.
DEGREES :DEGREES (?)        :See also Java Math.toDegrees. This method returns a double.
EXP     :EXP (?)            :See also Java Math.exp. This method returns a double.
FLOOR   :FLOOR (?)          :See also Java Math.floor. This method returns a double.
LOG     :LOG (?)            :See also Java Math.log.    This method returns a double.
LN      :LN (?)             :See also Java Math.LN.     This method returns a double.
LOG10   :LOG10 (?)          :See also Java Math.log10 (in Java 5). This method returns a double.
RADIANS :RADIANS (?)        :See also Java Math.toRadians. This method returns a double.
SQRT    :SQRT (?)           :See also Java Math.sqrt. This method returns a double.
PI      :PI (?)             :See also Java Math.PI. This method returns a double.
POWER   :POWER (X, Y)       :See also Java Math.pow. This method returns a double.
RAND    :RAND ([?])         :Calling the function without a parameter returns the next a pseudo random number. Calling it with a parameter seeds the session’s random number generator. This method returns a double between 0 (including) and 1 (excluding).
RANDOM  :RANDOM([expression])       :Calling the function without a parameter returns the next a pseudo random number. Calling it with a parameter seeds the session’s random number generator. This method returns a double between 0 (including) and 1 (excluding).
RANDOM_UUID :RANDOM_UUID ()         :Returns a new UUID with 122 pseudo random bits.
UUID        :UUID ()                :Returns a new UUID with 122 pseudo random bits.
ROUND       :ROUND ( ? [, precision] )  :Rounds to a number of digits, or to the nearest long if the number of digits if not set. This method returns a numeric (the same type as the input).
ROUNDMAGIC  :ROUNDMAGIC (?)             :This function is good for rounding numbers, but it can be slow. It has special handling for numbers around 0. Only numbers smaller than or equal to +/-1000000000000 are supported. The value is converted to a String internally, and then the last 4 characters are checked. '000x' becomes '0000' and '999x' becomes '999999', which is rounded automatically. This method returns a double.
SECURE_RAND :SECURE_RAND (int)          :Generate a number of cryptographically secure random numbers. This method returns bytes.
SIGN        :SIGN (?)               :Return -1 if the value is smaller 0, 0 if zero, and otherwise 1.
ENCRYPT     :ENCRYPT (algorithmString , keyBytes , dataBytes)   :Encrypt data using a key. The supported algorithm is AES. The block size is 16 bytes. This method returns bytes.
DECRYPT     :DECRYPT (algorithmString , keyBytes , dataBytes)   :Decrypts data using a key. The supported algorithm is AES. The block size is 16 bytes. This method returns bytes.
TRUNC       :TRUNC ({numeric, digitsInt} | timestamp | date | timestampString)      :Truncates to a number of digits (to the next value closer to 0). This method returns a double. When used with a timestamp, truncates a timestamp to a date (day) value. When used with a date, truncates a date to a date (day) value less time part. When used with a timestamp as string, truncates a timestamp to a date (day) value.
TRUNCATE    :TRUNCATE ({numeric, digitsInt} | timestamp | date | timestampString)   :Truncates to a number of digits (to the next value closer to 0). This method returns a double. When used with a timestamp, truncates a timestamp to a date (day) value. When used with a date, truncates a date to a date (day) value less time part. When used with a timestamp as string, truncates a timestamp to a date (day) value.
COMPRESS    :COMPRESS(dataBytes [, algorithmString])                                :Compress the data using the specified compression algorithm. Supported algorithms are: LZF (faster but lower compression; default), and DEFLATE (higher compression). Compression does not always reduce size. Very small objects and objects with little redundancy may get larger. This method returns bytes.
EXPAND      :EXPAND(dataBytes)                                                      :Expand data that was compressed using the COMPRESS function. This method returns bytes.
ZERO        :ZERO()                                                                 :Return the value 0. This function can be used even if numeric literals are disabled.
[String Functions]
ASCII:ASCII(string)                  :Return the ASCII value of the first character in the string. This method returns an int.
BIT_LENGTH:BIT_LENGTH(string)             :Returns the number of bits in a string. This method returns a long. For BLOB, CLOB, BYTES, and JAVA_OBJECT, the object’s specified precision is used. Each character needs 16 bits.
LENGTH:LENGTH(string)                 :Returns the number of characters in a string. This method returns a long. For BLOB, CLOB, BYTES, and JAVA_OBJECT, the object’s specified precision is used.
OCTET_LENGTH:OCTET_LENGTH(string)           :Returns the number of bytes in a string. This method returns a long. For BLOB, CLOB, BYTES and JAVA_OBJECT, the object’s specified precision is used. Each character needs 2 bytes.
CHAR:CHAR(int)                      :Returns the character that represents the ASCII value. This method returns a string.
CHR:CHR(int)                       :Returns the character that represents the ASCII value. This method returns a string.
CONCAT:CONCAT(string, string [,...])  :Combines strings. Unlike with the || operator, NULL parameters are ignored and do not cause the result to become NULL. This method returns a string.
CONCAT_WS:CONCAT_WS(separatorString, string, string [,...])  :Combines strings, dividing with a separator. Unlike with the || operator, NUL parameters are ignored, and do not cause the result to become NULL. This method returns a string.
DIFFERENCE:DIFFERENCE(X, Y)               :Returns the difference between the SOUNDEX() values of two strings. This method returns an int.
HEXTORAW:HEXTORAW(string)               :Converts a hex representation of a string to a string. 4 hex characters per string character are used.
RAWTOHEX:RAWTOHEX(string)               :Converts a string to the hex representation. 4 hex characters per string character are used. This method returns a string.
INSTR:INSTR(string, searchString, [, startInt])              :Returns the location of a search string in a string. If a start position is used, the characters before it are ignored. If position is negative, the rightmost location is returned. 0 is returned if the search string is not found. Please note this function is case sensitive, even if the parameters are not.
INSERT:INSERT(originalString, startInt, lengthInt, addString) :Inserts a additional string into the original string at a specified start position. The length specifies the number of characters that are removed at the start position in the original string. This method returns a string.
LOWER:LOWER(string)                                          :Converts a string to lowercase.
LCASE:LCASE(string)                                          :onverts a string to lowercase.
UPPER:UPPER(string)                                          :Converts a string to uppercase.
UCASE:UCASE(string)                                          :Converts a string to uppercase.
LEFT:LEFT(string, int)                                      :Returns the leftmost number of characters.
RIGHT:RIGHT(string, int)                                     :Returns the rightmost number of characters.
LOCATE:LOCATE(searchString, string [, startInt])  :Returns the location of a search string in a string. If a start position is used, the characters before it are ignored. If position is negative, the rightmost location is returned. 0 is returned if the search string is not found.
POSITION:POSITION(searchString, string)             :Returns the location of a search string in a string. See also LOCATE.
LPAD:LPAD(string, int[, paddingString])         :Left pad the string to the specified length. If the length is shorter than the string, it will be truncated at the end. If the padding string is not set, spaces will be used.
RPAD:RPAD(string, int[, paddingString])         :Right pad the string to the specified length. If the length is shorter than the string, it will be truncated. If the padding string is not set, spaces will be used.
LTRIM:LTRIM(string)                              :Removes all leading spaces from a string.
RTRIM:RTRIM(string)                              :Removes all trailing spaces from a string.
TRIM:TRIM ([{LEADING | TRAILING | BOTH} [string] FROM] string)                      :Removes all leading spaces, trailing spaces, or spaces at both ends, from a string. Other characters can be removed as well.
REGEXP_REPLACE:REGEXP_REPLACE(inputString, regexString, replacementString [, flagsString])    :Replaces each substring that matches a regular expression. For details, see the Java String.replaceAll() method. If any parameter is null (except the optional flagsString parameter), the result is null.
REGEXP_LIKE:REGEXP_LIKE(inputString, regexString [, flagsString])                          :Matches string to a regular expression. For details, see the Java Matcher.find() method. If any parameter is null (except the optional flagsString parameter), the result is null.
REPEAT:REPEAT(string, int)                                                            :Returns a string repeated some number of times.
REPLACE:REPLACE(string, searchString [, replacementString])                            :Replaces all occurrences of a search string in specified text with another string. If no replacement is specified, the search string is removed from the original string. If any parameter is null, the result is null.
SOUNDEX:SOUNDEX(string)                                                                :Returns a four character code representing the SOUNDEX of a string.
SPACE:SPACE(int)                                                                     :Returns a string consisting of the specified number of spaces.
STRINGDECODE:STRINGDECODE(string)                                                           :Converts an encoded string using the Java string literal encoding format. Special characters are \b, \t, \n, \f, \r, \", \, \<octal>, \u<unicode>. This method returns a string.
STRINGENCODE:STRINGENCODE(string)                                                           :Encodes special characters in a string using the Java string literal encoding format. Special characters are \b, \t, \n, \f, \r, \", \, \<octal>, \u<unicode>. This method returns a string.
STRINGTOUTF8:STRINGTOUTF8(string)                                                           :Encodes a string to a byte array using the UTF8 encoding format. This method returns bytes.
SUBSTRING:SUBSTRING(string, startInt [, lengthInt])                                      :Returns a substring of a string starting at the specified position. If the start index is negative, then the start index is relative to the end of the string. The length is optional. Also supported is: SUBSTRING(string [FROM start] [FOR length]).
SUBSTR:SUBSTR(string, startInt [, lengthInt])                                         :Returns a substring of a string starting at the specified position. If the start index is negative, then the start index is relative to the end of the string. The length is optional. Also supported is: SUBSTRING(string [FROM start] [FOR length]).
UTF8TOSTRING:UTF8TOSTRING(bytes)                                                            :Decodes a byte array in UTF8 format to a string.
XMLATTR:XMLATTR(nameString, valueString)                                               :Creates an XML attribute element of the form name=value. The value is encoded as XML text. This method returns a string.
XMLNODE:XMLNODE(elementString [, attributesString [, contentString [, indentBoolean]]])    :Create an XML node element. An empty or null attribute string means no attributes are set. An empty or null content string means the node is empty. The content is indented by default if it contains a newline. This method returns a string.
XMLCOMMENT:XMLCOMMENT(commentString)                                                          :Creates an XML comment. Two dashes (--) are converted to - -. This method returns a string.
XMLCDATA:XMLCDATA(valueString)                                                              :Creates an XML CDATA element. If the value contains ]]>, an XML text element is created instead. This method returns a string.
XMLSTARTDOC:XMLSTARTDOC()                                                                      :Returns the XML declaration. The result is always <?xml version=1.0?>.
TO_CHAR:TO_CHAR(value [, formatString[, nlsParamString]])                                  :Formats a timestamp, number, or text.
TRANSLATE:TRANSLATE(value , searchString, replacementString]])                               :Replaces a sequence of characters in a string with another set of characters.
[Date and Time Functions]
CURRENT_DATE:CURRENT_DATE                               :Returns the current date. When called multiple times within a transaction, this function returns the same value.
CURRENT_DATE():CURRENT_DATE()                           :Returns the current date. When called multiple times within a transaction, this function returns the same value.
CURDATE:CURDATE()                                              :Returns the current date. When called multiple times within a transaction, this function returns the same value.
SYSDATE:SYSDATE                                         :Returns the current date. When called multiple times within a transaction, this function returns the same value.
TODAY:TODAY                                             :Returns the current date. When called multiple times within a transaction, this function returns the same value.
CURRENT_TIME:CURRENT_TIME                               :Returns the current time. When called multiple times within a transaction, this function returns the same value.
CURRENT_TIME():CURRENT_TIME()                           :Returns the current time. When called multiple times within a transaction, this function returns the same value.
CURTIME:CURTIME()                                              :Returns the current time. When called multiple times within a transaction, this function returns the same value.
CURRENT_TIMESTAMP:CURRENT_TIMESTAMP                     :Returns the current timestamp. The precision parameter for nanoseconds precision is optional. This method always returns the same value within a transaction.
CURRENT_TIMESTAMP(int):CURRENT_TIMESTAMP(int)           :Returns the current timestamp. The precision parameter for nanoseconds precision is optional. This method always returns the same value within a transaction.
NOW:NOW()                                               :Returns the current timestamp. The precision parameter for nanoseconds precision is optional. This method always returns the same value within a transaction.
NOW(int):NOW(int)                                       :Returns the current timestamp. The precision parameter for nanoseconds precision is optional. This method always returns the same value within a transaction.
DATEADD:DATEADD(unitString, addIntLong, timestamp)             :Adds units to a timestamp. The string indicates the unit. Use negative values to subtract units. addIntLong may be a long value when manipulating milliseconds, otherwise its range is restricted to int. The same units as in the EXTRACT function are supported. The DATEADD method returns a timestamp. The TIMESTAMPADD method returns a long.
TIMESTAMPADD:TIMESTAMPADD(unitString, addIntLong, timestamp)        :Adds units to a timestamp. The string indicates the unit. Use negative values to subtract units. addIntLong may be a long value when manipulating milliseconds, otherwise its range is restricted to int. The same units as in the EXTRACT function are supported. The DATEADD method returns a timestamp. The TIMESTAMPADD method returns a long.
DATEDIFF:DATEDIFF (unitString, aTimestamp, bTimestamp)          :Returns the number of crossed unit boundaries between two timestamps. This method returns a long. The string indicates the unit. The same units as in the EXTRACT function are supported.
TIMESTAMPDIFF:TIMESTAMPDIFF (unitString, aTimestamp, bTimestamp)     :Returns the number of crossed unit boundaries between two timestamps. This method returns a long. The string indicates the unit. The same units as in the EXTRACT function are supported.
DAYNAME:DAYNAME(date)                                          :Returns the name of the day (in English).
DAY_OF_MONTH:DAY_OF_MONTH(date)                                     :Returns the day of the month (1-31).
DAY_OF_WEEK:DAY_OF_WEEK(date)                                      :Returns the day of the week (1 means Sunday).
DAY_OF_YEAR:DAY_OF_YEAR(date)                                      :Returns the day of the year (1-366).
EXTRACT:EXTRACT ({EPOCH | YEAR | YY | QUARTER | MONTH | MM | WEEK | ISO_WEEK | DAY | DD | DAY_OF_YEAR | DOY | DAY_OF_WEEK | DOW | ISO_DAY_OF_WEEK | HOUR | HH | MINUTE | MI | SECOND | SS | MILLISECOND | MS | MICROSECOND | MCS | NANOSECOND | NS} FROM timestamp)    :Returns a specific value from a timestamps. This method returns an int.
FORMATDATETIME:FORMATDATETIME (timestamp, formatString [,localeString [,timeZoneString]])     :Formats a date, time, or timestamp as a string. The most important format characters are: y year, M month, d day, H hour, m minute, s second. For details about the format, see java.text.SimpleDateFormat. This method returns a string.
HOUR:HOUR(timestamp)                                                                :Returns the hour (0-23) from a timestamp.
MINUTE:MINUTE(timestamp)                                                              :Returns the minute (0-59) from a timestamp.
MONTH:MONTH(timestamp)                                                               :Returns the month (1-12) from a timestamp.
MONTHNAME:MONTHNAME(date)                                                                :Returns the name of the month (in English).
PARSEDATETIME:PARSEDATETIME(string, formatString [, localeString [, timeZoneString]])        :Parses a string and returns a timestamp. The most important format characters are: y year, M month, d day, H hour, m minute, s second. For details about the format, see java.text.SimpleDateFormat.
QUARTER:QUARTER(timestamp)                                                             :Returns the quarter (1-4) from a timestamp.
SECOND:SECOND(timestamp)                                                              :Returns the second (0-59) from a timestamp.
WEEK:WEEK(timestamp)                                                                :Returns the week (1-53) from a timestamp. This method uses the current system locale.
YEAR:YEAR(timestamp)                                                                :Returns the year from a timestamp.
[System Functions]
COALESCE:COALESCE(aValue, bValue [,...])                    :Returns the first value that is not null.
NVL:NVL(aValue, bValue [,...])                         :Returns the first value that is not null.
DECODE:DECODE(value, whenValue, thenValue [,...])         :Returns the first matching value. NULL is considered to match NULL. If no match was found, then NULL or the last parameter (if the parameter count is even) is returned.
GREATEST:GREATEST(aValue, bValue [,...])                    :Returns the largest value that is not NULL, or NULL if all values are NULL.
IFNULL:IFNULL(aValue, bValue)                             :Returns the value of 'a' if it is not null, otherwise 'b'.
LEAST:LEAST(aValue, bValue [,...])                       :Returns the smallest value that is not NULL, or NULL if all values are NULL.
NULLIF:NULLIF(aValue, bValue)                             :Returns NULL if 'a' is equals to 'b', otherwise 'a'.
NVL2:NVL2(testValue, aValue, bValue)                    :If the test value is null, then 'b' is returned. Otherwise, 'a' is returned. The data type of the returned value is the data type of 'a' if this is a text type.
CASEWHEN:CASEWHEN (boolean , aValue , bValue)               :Returns 'aValue' if the boolean expression is true, otherwise 'bValue'.
CAST:CAST (value AS dataType)                           :Converts a value to another data type.
CONVERT:CONVERT (value , dataType)                         :Converts a value to another data type.
TABLE:TABLE(name dataType = expression)                  :Returns the result set. TABLE_DISTINCT removes duplicate rows.
TABLE_DISTINCT:TABLE_DISTINCT	(name dataType = expression)        :Returns the result set. TABLE_DISTINCT removes duplicate rows.




