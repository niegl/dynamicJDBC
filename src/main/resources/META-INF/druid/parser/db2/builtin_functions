[AggregateFunctions]
Ordinary array aggregation      :ARRAY_AGG( element-expression [ORDER BY {sort-key [ASC|DESC]}...]):The ARRAY_AGG function aggregates a set of elements into an array.
Associative array aggregation   :ARRAY_AGG( index-expression , element-expression ):The ARRAY_AGG function aggregates a set of elements into an array.
AVG                 :AVG( expression )          :The AVG function returns the average of a set of numbers.
AVG(ALL)            :AVG( ALL expression )      :The AVG function returns the average of a set of numbers.
AVG(DISTINCT)       :AVG( DISTINCT expression ) :The AVG function returns the average of a set of numbers.
CORR                :CORR(expression1, expression2 )
CORRELATION         :CORRELATION(expression1, expression2 ):The CORRELATION function returns the coefficient of correlation of a set of number pairs.
COUNT               :COUNT( expression )            :The COUNT function returns the number of rows or values in a set of rows or values.
COUNT(ALL)          :COUNT( ALL expression )        :The COUNT function returns the number of rows or values in a set of rows or values.
COUNT(DISTINCT)     :COUNT( DISTINCT expression )   :The COUNT function returns the number of rows or values in a set of rows or values.
COUNT_BIG           :COUNT_BIG( * )                 :The COUNT_BIG function returns the number of rows or values in a set of rows or values. It is similar to COUNT except that the result can be greater than the maximum value of integer.
COUNT_BIG(ALL)      :COUNT_BIG( ALL expression )    :The COUNT_BIG function returns the number of rows or values in a set of rows or values. It is similar to COUNT except that the result can be greater than the maximum value of integer.
COUNT_BIG(DISTINCT) :COUNT_BIG( DISTINCT expression ):The COUNT_BIG function returns the number of rows or values in a set of rows or values. It is similar to COUNT except that the result can be greater than the maximum value of integer.
COVARIANCE(expression1,expression2) :COVARIANCE(expression1,expression2)        :The COVARIANCE function returns the (population) covariance of a set of number pairs.
COVARIANCE_SAMP     :COVARIANCE_SAMP(expression1,expression2)                   :The COVARIANCE_SAMP function returns the sample covariance of a set of number pairs.
CUME_DIST           :CUME_DIST(expression[,...]) WITHIN GROUP (order-by-clause) :The CUME_DIST function returns the cumulative distribution of a row that is hypothetically inserted into a group of rows.
GROUPING            :GROUPING(expression)   :Used in conjunction with grouping-sets and super-groups, the GROUPING function returns a value that indicates whether or not a row returned in a GROUP BY answer set is a row generated by a grouping set that excludes the column represented by expression.
LISTAGG             :LISTAGG([ALL|DISTINCT] string-expression [,separator]) [ WITHIN GROUP (ORDER BY {sort-key [ASC|DESC]...}]) ]:The LISTAGG function aggregates a set of string elements into one string by concatenating the strings. Optionally, a separator string can be provided which is inserted between contiguous input strings.
MAX             :MAX( ? )               :The MAX function returns the maximum value in a set of values.
MAX(ALL)        :MAX( ALL ? )           :The MAX function returns the maximum value in a set of values.
MAX(DISTINCT)   :MAX( DISTINCT ? )      :The MAX function returns the maximum value in a set of values.
MIN             :MIN( ? )               :The MIN function returns the minimum value in a set of values.
MIN(ALL)        :MIN( ALL ? )           :The MIN function returns the minimum value in a set of values.
MIN(DISTINCT)   :MIN( DISTINCT ? )      :The MIN function returns the minimum value in a set of values.
STDDEV                  :STDDEV( ? )          :The STDDEV function returns the biased standard deviation (division by n) of a set of numbers.
STDDEV(ALL)             :STDDEV( ALL ? )      :The STDDEV function returns the biased standard deviation (division by n) of a set of numbers.
STDDEV(DISTINCT)        :STDDEV( DISTINCT ? ) :The STDDEV function returns the biased standard deviation (division by n) of a set of numbers.
PERCENTILE_CONT :PERCENTILE_CONT(?) WITHIN GROUP (ORDER BY sort-key [ASC|DESC])  :The PERCENTILE_CONT function returns the value that corresponds to the specified percentile given a sort specification by using a continuous distribution model.
PERCENTILE_DISC :PERCENTILE_DISC(?) WITHIN GROUP (ORDER BY sort-key [ASC|DESC])  :The PERCENTILE_DISC function returns the value that corresponds to the specified percentile given a sort specification by using a discrete distribution model.
PERCENT_RANK    :PERCENT_RANK(expression[,...]) WITHIN GROUP (order-by-clause)   :The PERCENT_RANK function returns the relative percentile rank of a row that is hypothetically inserted into a group of rows.
REGR_AVGX       :REGR_AVGX(expression1,expression2)         :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_AVGY       :REGR_AVGY(expression1,expression2)         :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_COUNT      :REGR_COUNT(expression1,expression2)        :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_INTERCEPT  :REGR_INTERCEPT(expression1,expression2)    :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_ICPT       :REGR_ICPT(expression1,expression2)         :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_R2         :REGR_R2(expression1,expression2)           :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_SLOPE      :REGR_SLOPE(expression1,expression2)        :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_SXX        :REGR_SXX(expression1,expression2)          :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_SXY        :REGR_SXY(expression1,expression2)          :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
REGR_SYY        :REGR_SYY(expression1,expression2)          :The regression functions support the fitting of an ordinary-least-squares regression line of the form y = a * x + b to a set of number pairs.
STDDEV_SAMP()           :STDDEV_SAMP( ? )                   :The STDDEV_SAMP function returns the sample standard deviation (division by [n-1]) of a set of numbers.
STDDEV_SAMP(ALL)        :STDDEV_SAMP( ALL ? )               :The STDDEV_SAMP function returns the sample standard deviation (division by [n-1]) of a set of numbers.
STDDEV_SAMP(DISTINCT)   :STDDEV_SAMP( DISTINCT ? )          :The STDDEV_SAMP function returns the sample standard deviation (division by [n-1]) of a set of numbers.
SUM()           :SUM( ? )                   :The SUM function returns the sum of a set of numbers.
SUM(ALL)        :SUM( ALL ? )               :The SUM function returns the sum of a set of numbers.
SUM(DISTINCT)   :SUM( DISTINCT ? )          :The SUM function returns the sum of a set of numbers.
VARIANCE()                  :VARIANCE( ? )                          :The VARIANCE function returns the biased variance (division by n) of a set of numbers.
VARIANCE(ALL)               :VARIANCE( ALL ? )                      :The VARIANCE function returns the biased variance (division by n) of a set of numbers.
VARIANCE(DISTINCT)          :VARIANCE( DISTINCT ? )                 :The VARIANCE function returns the biased variance (division by n) of a set of numbers.
VARIANCE_SAMP()             :VARIANCE_SAMP( ? )                     :The VARIANCE_SAMP function returns the sample variance (division by [n-1]) of a set of numbers.
VARIANCE_SAMP(ALL)          :VARIANCE_SAMP( ALL ? )                 :The VARIANCE_SAMP function returns the sample variance (division by [n-1]) of a set of numbers.
VARIANCE_SAMP(DISTINCT)     :VARIANCE_SAMP( DISTINCT ? )            :The VARIANCE_SAMP function returns the sample variance (division by [n-1]) of a set of numbers.
XMLAGG()                    :XMLAGG( element-expression [ORDER BY {sort-key [ASC|DESC]}...])    :The XMLAGG function returns an XML sequence containing an item for each non-null value in a set of XML values.
XMLGROUP()  :XMLGROUP({expression[ AS qname-identifier]}...[ ORDER BY {sort-key [ASC|DESC]}...][ OPTION ROW "row"|ROW row-name|ROOT "rowset"|ROOT root-name|AS ATTRIBUTES])       :The XMLGROUP function returns an XML value with a single XQuery document node containing one top-level element node. This is an aggregate expression that will return a single-rooted XML document from a group of rows where each row is mapped to a row subelement.
[Array functions]
Ordinary array aggregation      :ARRAY_AGG( element-expression [ORDER BY {sort-key [ASC|DESC]}...]) :The ARRAY_AGG function aggregates a set of elements into
Associative array aggregation   :ARRAY_AGG( index-expression , element-expression )                 :The ARRAY_AGG function aggregates a set of elements into an array.
ARRAY_DELETE()      :ARRAY_DELETE(array-expression[,array-index1[,array-index2]])    : Deletes an element or range of elements from an associative array.
ARRAY_FIRST()       :ARRAY_FIRST(array-expression)                          : Returns the smallest array index value of the array.
ARRAY_LAST()        :ARRAY_LAST(array-expression)                           : Returns the largest array index value of the array.
ARRAY_NEXT()        :ARRAY_NEXT(array-expression,array-index)               : Returns the next larger array index value for an array relative to the specified array index argument.
ARRAY_PRIOR()       :ARRAY_PRIOR(array-expression,array-index)              : Returns the next smaller array index value for an array relative to the specified array index argument.
CARDINALITY()       :CARDINALITY(array-expression)                          : Returns a value of type BIGINT representing the number of elements of an array
MAX_CARDINALITY()   :MAX_CARDINALITY(array-expression)                      : Returns a value of type BIGINT representing the maximum number of elements that an array can contain.
TRIM_ARRAY()        :TRIM_ARRAY(array-expression ,numeric-expression)       : Returns a value with the same array type as array-variable but with the cardinality reduced by the value of numeric-expression.
ARRAY_TRIM()        :ARRAY_TRIM(array-expression ,numeric-expression)       : Returns a value with the same array type as array-variable but with the cardinality reduced by the value of numeric-expression.
UNNEST()            :UNNEST(array-expression...)                            : Returns a result table that includes a row for each element of the specified array.
TABLE()             :TABLE(array-expression...)                             : Returns a result table that includes a row for each element of the specified array.
[Cast scalar functions]
BIGINT 	        :BIGINT(?)	    :Returns a 64-bit integer representation of a value in the form of an integer constant.
BINARY 	        :BINARY(?[, integer])	    :Returns a fixed-length binary string representation of a string of any data type.
BLOB 	        :BLOB (?[, integer])       :Returns a BLOB representation of a string of any type.
BPCHAR 	        :BPCHAR(?)	   :Returns a VARCHAR representation of a value.
CHAR(Integer to CHAR|Boolean to CHAR) 	                                                :CHAR (?)                               :Returns a CHARACTER representation of a value.
CHAR(Decimal to CHAR|Floating-point to CHAR|Decimal floating-point to CHAR|) 	        :CHAR (?[,decimal-character])           :Returns a CHARACTER representation of a value.
CHAR(Character string to CHAR|Graphic string to CHAR|Binary string to CHAR) 	        :CHAR (?[,integer])                     :Returns a CHARACTER representation of a value.
CHAR(Datetime to CHAR) 	                                                                :CHAR (?[,ISO|USA|EUR|JIS|LOCAL])       :Returns a CHARACTER representation of a value.
CLOB 	        :CLOB (character-string-expression[,integer])           :Returns a CLOB representation of a value.
DATE 	        :DATE (?)                                               :Returns a DATE from a value.
DATETIME 	    :DATETIME(?)                                            :Returns a TIMESTAMP from a value or a pair of values.
DBCLOB 	        :DBCLOB (graphic-expression[,integer])	                :Returns a DBCLOB representation of a string.
DECFLOAT(Numeric to decimal floating-point) 	    :DECFLOAT(numeric-expression[,34|16])                       :Returns the decimal floating-point representation of a value.
DECFLOAT(Character to decimal floating-point) 	    :DECFLOAT(string-expression[,{34[,decimal-character]}|{16[,decimal-character]}])   :Returns the decimal floating-point representation of a value.
DECFLOAT(Boolean to decimal floating-point) 	    :DECFLOAT(boolean-expression[,34|16])                       :Returns the decimal floating-point representation of a value.
DECIMAL(Numeric to DECIMAL|Datetime to DECIMAL) 	:DECIMAL(?[,precision[,scale]])                             :Returns a DECIMAL representation of a value.
DECIMAL(String to DECIMAL) 	                        :DECIMAL(?[,precision[,scale[,decimal-character]]])         :Returns a DECIMAL representation of a value.
DEC(Numeric to DECIMAL|Datetime to DECIMAL) 	    :DEC(?[,precision[,scale]])                                 :Returns a DECIMAL representation of a value.
DEC(String to DECIMAL) 	                            :DEC(?[,precision[,scale[,decimal-character]]])             :Returns a DECIMAL representation of a value.
DOUBLE_PRECISION    :DOUBLE_PRECISION(?)            :Returns the floating-point representation of a value.
DOUBLE              :DOUBLE(?)                      :Returns the floating-point representation of a value.
EMPTY_BLOB()        :EMPTY_BLOB()                   :Return a zero-length value of the associated data type.
EMPTY_CLOB()        :EMPTY_CLOB()                   :Return a zero-length value of the associated data type.
EMPTY_DBCLOB()      :EMPTY_DBCLOB()                 :Return a zero-length value of the associated data type.
EMPTY_NCLOB()       :EMPTY_NCLOB()                  :Return a zero-length value of the associated data type.
FLOAT() 	        :FLOAT(?) 	                    :Returns a DOUBLE representation of a value.
FLOAT4() 	        :FLOAT4(?) 	                    :Returns a REAL representation of a value.
FLOAT8() 	        :FLOAT8(?) 	                    :Returns a DOUBLE representation of a value.
GRAPHIC(Integer to graphic|Boolean to vargraphic) 	                                    :GRAPHIC(?) 	                        :Returns a GRAPHIC representation of a string.
GRAPHIC(Decimal to graphic|Floating-point to graphic|Decimal floating-point to graphic) :GRAPHIC(?[,decimal-character]) 	    :Returns a GRAPHIC representation of a string.
GRAPHIC(Character to graphic|Graphic to graphic) 	                                    :GRAPHIC(?[,integer]) 	                :Returns a GRAPHIC representation of a string.
GRAPHIC(Datetime to graphic) 	                                                        :GRAPHIC(?[,ISO|USA|EUR|JIS|LOCAL]) 	:Returns a GRAPHIC representation of a string.
INT() 	            :INT(?) 	       :Returns an INTEGER representation of a value.
INTEGER() 	        :INTEGER(?) 	   :Returns an INTEGER representation of a value.
INTERVAL()          :INTERVAL(string-constant)     :Returns a DECIMAL duration that corresponds to a duration specified as a string.
INT2() 	            :INT2(?) 	       :Returns a SMALLINT representation of a value.
INT4() 	            :INT4(?) 	       :Returns a INTEGER representation of a value.
INT8() 	            :INT8(?) 	       :Returns a BIGINT representation of a value.
NCHAR(Integer to nchar|Boolean to nvarchar) 	                                            :NCHAR (?)                               :Returns a fixed-length national character string representation of a value.
NCHAR(Decimal to NCHAR|Floating-point to NCHAR|Decimal floating-point to NCHAR|) 	        :NCHAR (?[,decimal-character])           :Returns a fixed-length national character string representation of a value.
NCHAR(Character to NCHAR|Graphic to NCHAR|Binary to NCHAR) 	                                :NCHAR (?[,integer])                     :Returns a fixed-length national character string representation of a value.
NCHAR(Datetime to NCHAR) 	                                                                :NCHAR (?[,ISO|USA|EUR|JIS|LOCAL])       :Returns a fixed-length national character string representation of a value.
NCLOB() 	        :NCLOB(national-character-expression[,integer]) 	   :Returns an NCLOB representation of a national character string.
NUMERIC() 	        :NUMERIC(?) 	   :Returns a DECIMAL representation of a value.
NVARCHAR(Integer to nvarchar|Boolean to nvarchar) 	                                        :NVARCHAR(?)                               :Returns a varying-length national character string representation of a value.
NVARCHAR(Decimal to nvarchar|Floating-point to nvarchar|Decimal floating-point to nvarchar) :NVARCHAR(?[,decimal-character])           :Returns a varying-length national character string representation of a value.
NVARCHAR(Character to nvarchar|Graphic to nvarchar|nchar to nvarchar) 	                    :NVARCHAR(?[,integer])                     :Returns a varying-length national character string representation of a value.
NVARCHAR(Datetime to NCHAR) 	                                                            :NVARCHAR(?[,ISO|USA|EUR|JIS|LOCAL])       :Returns a varying-length national character string representation of a value.
REAL() 	            :REAL(?) 	        :Returns the single-precision floating-point representation of a value.
SMALLINT()          :SMALLINT(?)        :Returns a SMALLINT representation of a value.
TIME() 	            :TIME(?) 	        :Returns a TIME from a value.
TIMESTAMP()         :TIMESTAMP(expression1[,expression2])    :Returns a TIMESTAMP from a value or a pair of values.
TO_CLOB() 	        :TO_CLOB(?[,integer]) 	   :Returns a CLOB representation of a character string type.
TO_NCLOB()          :TO_NCLOB(?)     :Returns an NCLOB representation of a character string.
VARBINARY()         :VARBINARY(?[,integer])    :Returns a VARBINARY (varying-length binary string) representation of a string of any data type.
VARCHAR(Binary integer to VARCHAR|Boolean to VARCHAR) 	                                                :VARCHAR(?)                               :Returns a VARCHAR representation of a value.
VARCHAR(Decimal to VARCHAR|Floating-point to varchar|Decimal floating-point to varchar)                 :VARCHAR(?[,decimal-character])           :Returns a VARCHAR representation of a value.
VARCHAR(Character to varchar|Graphic to varchar) 	                                                    :VARCHAR(?[,integer])                     :Returns a VARCHAR representation of a value.
VARCHAR(Datetime to VARCHAR) 	                                                                        :VARCHAR(?[,ISO|USA|EUR|JIS|LOCAL])       :Returns a VARCHAR representation of a value.
VARGRAPHIC(Integer to vargraphic|Boolean to vargraphic) 	                                            :VARGRAPHIC(?)                               :
VARGRAPHIC(Decimal to vargraphic|Floating-point to vargraphic|Decimal floating-point to vargraphic)     :VARGRAPHIC(?[,decimal-character])           :
VARGRAPHIC(Character to vargraphic|Graphic to vargraphic) 	                                            :VARGRAPHIC(?[,integer])                     :
VARGRAPHIC(Datetime to vargraphic) 	                                                                    :VARGRAPHIC(?[,ISO|USA|EUR|JIS|LOCAL])       :
[Datetime scalar functions]


































