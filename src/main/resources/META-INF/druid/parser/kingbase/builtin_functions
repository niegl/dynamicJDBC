[数学函数]
ABS                         :abs (n)                :ABS返回n的绝对值。
BITAND                      :bitand(expr1, expr2)               :该BITAND函数将其输入和输出视为位向量；输出是AND输入的按位。expr1和的类型expr2是NUMBER，结果是类型NUMBER。如果任一参数BITAND为NULL，则结果为NULL。参数必须在 -(2 (n-1) ) .. ((2 (n-1) )-1) 范围内。如果参数超出此范围，则结果未定义。
BITTONUMERIC                :bittonumeric(expr)                 :此函数将0和1组成的位串转为numeric类型数值。expr可以是01组成的常量串('0110')，也可以是bit(n),varbit(n)类型的表达式，其中n最大支持64，超过会报错，即返回值范围为64位整数的取值范围。
CBRT                        :cbrt(dp)                       :数学函数，返回 dp 的立方根。
CEIL                        :ceil(n)                        :数学函数 ，CEIL返回大于或等于n的最小整数。该数字n始终可以写为整数k和正分数的差f，使得 0 <= f< 1 和n= k- f。CEIL的值是整数k。因此，当且仅当的值恰好是一个整数 时，它的值CEIL就是它本身。此函数将任何数值数据类型或任何可以隐式转换为数值数据类型的非数值数据类型作为参数。该函数返回与参数的数值数据类型相同的数据类型。
CEILING                     :ceiling({dp|numeric})          :数学函数 ，CEIL返回大于或等于dp的最小整数。 ceil 函数的别名。
DEGREES                     :degrees(dp)                                :数学函数，把弧度转化为角度
DIV                         :div(y numeric, x numeric)                  :数学函数 ，返回 y 除以 x 的整数商。
EXP                         :exp({dp|numeric})                                      :数学函数，返回输入参数的指数。
FLOOR                       :first_value(n)                 :FLOOR返回等于或小于n的最大整数。该数字n始终可以写为整数k和正分数之和f，使得 0 <= f< 1 和n= k+ f。的值FLOOR是整数k。因此，当且仅当的值恰好是一个整数n时，它的值FLOOR就是它本身。此函数将任何数值数据类型或任何可以隐式转换为数值数据类型的非数值数据类型作为参数。该函数返回与参数的数值数据类型相同的数据类型。
LN                          :ln({dp|numeric})               :LN返回n的自然对数，其中n大于 0。
LOG                         :log({dp|numeric})              :LOG返回以n2为底n1的对数。底数n2可以是除0或1以外的任何正数，n1也可以是任何正数。
LOG10                       :log10({numeric|double})        :返回对numeric和double值进行取以10为底的对数值。
MOD                         :mod(y,x)                                       :MOD返回n2除以n1的余数。n1如果为 0，则返回n2。
PI                          :pi()                               :返回一个π的double类型值
POWER                       :power(a dp, b dp)                  :返回 a 的 b 次幂
RADIANS                     :radians(dp)                        :radians(dp)把角度dp转为弧度。
ROUND                       :round(date)                                :参数为时间时
SCALE                       :scale(numeric)                                     :SCALE返回参数的精度（小数点后的位数）。
SIGN                        :sign({dp|numeric})         :SIGN返回 的符号n。此函数将任何数字数据类型或任何可以隐式转换为 的非数字数据类型作为参数NUMBER，并返回NUMBER。
SQRT                        :sqrt(n)                    :SQRT返回n的平方根。
TRUNC(DATE)                             :TRUNC( date[,fmt])                     :函数返回date一天中的时间部分，截断为格式 model 指定的单位fmt。NLS_CALENDAR该函数对会话参数不敏感。它按照公历的规则运作。返回的值始终是数据类型DATE，即使您为 指定了不同的日期时间数据类型date。如果省略fmt，则使用默认格式模型 ' DD'，并且返回的值将被date截断为时间为午夜的日期。请参阅“ ROUND 和 TRUNC 日期函数”了解允许使用的格式模型fmt。
TRUNC(NUMBER)                           :TRUN(n1[,n2])                          :函数返回n1截断到n2小数位。如果n2省略，则将n1截断为 0 位。n2可以为负数以截断（使为零）n2小数点左侧的数字。
RANDOM                      :random()               :生成范围 0.0 <= x < 1.0 中的随机值
SETSEED                     :setseed(dp)                                        :为后续要使用的random函数设置种子。
ACOS                        :acos(n)                :ACOS返回n的反余弦。参数n必须在 -1 到 1 的范围内，并且函数返回一个在 0 到pi范围内的值，以弧度表示。
ASIN                        :asin(n)                            :ASIN返回 n的反正弦。参数n必须在 -1 到 1 的范围内，函数返回的值在-pi /2 到pi /2 的范围内，以弧度表示。
ATAN                        :atan(n)                            :ATAN返回 n的反正切。参数n可以在无界范围内，并返回 - pi /2 到pi /2 范围内的值，以弧度表示。
ATAN2                       :atan2(n1, n2)                      :ATAN2返回n1和n2的反正切。参数n1可以在无界范围内，并返回-pi到pi范围内的值，具体取决于 n1和 n2的符号，以弧度表示。
COS                         :cos(n)                 :三角函数，COS返回n的余弦（以弧度表示的角度）。
COT                         :cot(n)                 :三角函数，COSH返回n的余切。n以弧度表示。
SIN                         :sin({dp|numeric})          :SIN返回（以弧度表示的角度） n的正弦值。
TAN                                     :TAN(expr)                                          :TAN返回（以弧度表示的角度） n的正切。
SINH                        :sinh({dp|numeric})         :SINH返回n的双曲正弦。
COSH                        :cosh(n)                :三角函数，COSH返回n的双曲余弦。
TANH                                    :TANH(expr)                                         :TANH返回n的双曲正切。
ASINH                       :asinh(n)                           :ASINH返回 n的反双曲正弦。
ACOSH                       :acosh(n)               :ACOS返回n的反双曲余弦 。
ATANH                       :atanh(n)                           :ATANh返回n的反双曲正切。
[字符串函数]
BIT_LENGTH                  :bit_length(string)                 :返回 string 中的位数
BTRIM                       :btrim(string text [,characters text])          :字符串函数，从 string 的开头或结尾删除最长的只包含 characters （默认是一个空格）的串。
CHAR_LENGTH                 :char_length(string)            :字符串函数 ，返回字符串 string 的字符数。
CHARACTER_LENGTH            :character_length(string)       :字符串函数 ，返回字符串 string 的字符数,同 char_length 。
CHARINDEX                   :charindex(sub_str varchar, src_str varchar[, start_location int default 1])    :字符串函数 ，返回 sub_str 在 src_str 中第一次出现的位置，从 start_location 位置开始查找， start_location 小于等于 0 或者为空时默认为 1。不存在则返回 0。
CHR                         :chr(int)                           :字符串函数，返回给定代码的字符。对于 UTF8 该参数被视作一个 Unicode 代码点。对于其他多字节编码该参数必须指定一个 ASCII 字符。 NULL (0)字符不被允许， 因为文本数据类型不能 存储这种字节。
CONCAT                      :concat(str ”any”  [, str ”any”  [, ...] ]) :字符串函数，串接所有参数的文本表示。 NULL 参数被忽略.
CONCAT_WS                   :concat_ws(sep text,str ” any” [,str ” any” [, ...]])       :字符串函数，将除了第一个参数 seq 外的其他参数用分隔符串接在一起。第一个参数被用作分隔符字符串。NULL 参数被忽略。
CONTAINS                    :contains(expr1 text,expr2 text [,label Numeric])           :在SELECT语句中使用CONTAINS函数来指定文本查询的查询表达式，不限定使用位置。CONTAINS返回bool变量，表示expr1 是否包含expr2。 label标识符表示是否计算相关性分数，利用score函数可以获得分数。
CONVERT                     :convert(string bytea,src_encoding name,dest_encoding name) :字符串函数，将字符串转换为dest_encoding。原始编码由src_encoding指定。 string在这个编 码中必须可用。转换可以使用 CREATECONVERSION 定义。也有一些预定义的转换。
CONVERT_FROM                :convert_from(string bytea, src_encoding name)              :字符串函数，将字符串转换为数据库编码。 原始编码 由src_encoding指定。 string在这个编码中必须可用。
CONVERT_TO                  :convert_to(string text,dest_encoding name)                 :字符串函数，将字符串 string 转换为 dest_encoding 指定的编码格式。
DECODING                    :decoding(string text,format text)          :从 string 中的文本表达解码二进制数据。format 的选项和 encode 中的一样。
ENCODE                      :encode(data bytea,format text)             :字符串函数 ，将二进制数据 data 编码成一个文本表达。 format 支持的格式有：base64 、 hex、escape。 escape 将零字节和高位组字节转换为八进制序列（nnn）和双写的反斜线
FORMAT                      :format(formatstr text [, formatarg "any" [, ...] ])    :函数 format 根据一个格式字符串产生格式化的输出，其形式类似于 C 函数 sprintf 。 ``formatstr`` 是一个格式字符串，它指定了结果应该如何被格式化。格式字符串中的文本被直接复制到结果中，除了使用 格式说明符 的地方。格式说明符在字符串中扮演着占位符的角色，它定义后续的函数参数如何被格式化及插入到结果中。每一个 ``formatarg`` 参数会被根据其数据类型的常规输出规则转换为文本，并接着根据格式说明符被格式化和插入到结果字符串中。 格式说明符由一个 % 字符开始并且有这样的形式
FORMAT                      :format(formatstr text [, formatarg "any" [, ...] ])    :函数 format 根据一个格式字符串产生格式化的输出，其形式类似于 C 函数 sprintf 。 ``formatstr`` 是一个格式字符串，它指定了结果应该如何被格式化。格式字符串中的文本被直接复制到结果中，除了使用 格式说明符 的地方。格式说明符在字符串中扮演着占位符的角色，它定义后续的函数参数如何被格式化及插入到结果中。每一个 ``formatarg`` 参数会被根据其数据类型的常规输出规则转换为文本，并接着根据格式说明符被格式化和插入到结果字符串中。 格式说明符由一个 % 字符开始并且有这样的形式
INITCAP                     :initcap(string)                                        :INITCAP返回char，每个单词的第一个字母大写，所有其他字母小写。单词由空格或非字母数字字符分隔。
INSTR                       :instr(expr1 text, expr2 text,[expr3 int[,expr4 int]])                                  :在父字符串 expr1 中的第 expr3 个位置（从 1 开始）以字符为单位开始查找第 expr4 次出现的子字符串的位置，0 表示不包含子字符串 expr2。如果expr3 为负，则从 expr1 的倒数第 expr3 个位置开始反向查找，位置依然是从字符串开头算起。
instrb                      :instrb(expr1 text,expr2 text,[expr3 int[,expr4 int]])                                  :在父字符串 expr1 中的第 expr3 个位置（从 1 开始）以字符为单位开始查找第expr4 次出现的子字符串的位置， 0 表示不包含子字符串 expr2。如果 expr3 为负，则从 expr1 的倒数第 expr3 个位置开始反向查找，位置依然是从字符串开头算起。
LOWER                       :lower(string)                  :LOWER返回char，所有字母小写。char可以是任何数据类型CHAR, VARCHAR, NCHAR, NVARCHAR, CLOB, 或NCLOB. 返回值与 的数据类型相同char。数据库根据为基础字符集定义的二进制映射设置字符的大小写。对于语言敏感的小写，请参阅NLS_LOWER。
OCTET_LENGTH                :octet_length(string)                           :函数返回以字节计的数据字符表达的长度,字符串尾部空格字符也会被计算在内。
OVERLAY                     :overlay(string placing  string from  int [for int]):将用字符串expr1中指定起始位(from后的数值）开始后的(指定长度，for后的数值)字符串，用给定的字符串expr2替换。
POSITION                    :position(substring in string)      :返回指定子串的位置
SUBSTRING                   :substring(string [from int]  [for int])    :这些SUBSTR函数返回 的一部分char，从字符开始position，substring_length字符长。SUBSTR使用输入字符集定义的字符计算长度。SUBSTRB使用字节而不是字符。SUBSTRC使用 Unicode 完整字符。SUBSTR2使用 UCS2 代码点。SUBSTR4使用 UCS4 代码点。
TRIM                                    :TRIM([{LEADING|TRAILING|BOTH[ trim_character]} | trim_character FROM ] trim_source)   :TRIM使您能够从字符串中修剪前导字符或尾随字符（或两者）。如果trim_characterortrim_source是字符文字，则必须将其括在单引号中。
UPPER                                   :UPPER(char)                        :UPPER返回所有字母大写。char可以是任何数据类型CHARACTER VARYING(N [CHAR | BYTE])、VARCHAR(N [CHAR | BYTE])、CHARACTER(N [CHAR | BYTE])、CHAR(N [CHAR | BYTE])、TEXT、CLOB或NCLOB，返回值与char的数据类型相同。非字符串类型作为upper函数的输入，默认隐式转换为text类型，返回类型为text。数据库根据为基础字符集定义的二进制映射设置字符的大小写。对于语言敏感的大写，请参阅NLS_UPPER。
[二进制串函数]
BLOB_EXPORT                 :blob_export(blob ,string )         :将 blob 大对象的内容导出到磁盘文件。
BLOB_IMPORT                 :blob_import(string )               :将指定文件 blob 大对象的形式导入到数据库。
BTRIM                       :btrim(string text [,characters text])          :字符串函数，从 string 的开头或结尾删除最长的只包含 characters （默认是一个空格）的串。
DECODING                    :decoding(string text,format text)          :从 string 中的文本表达解码二进制数据。format 的选项和 encode 中的一样。
EMPTY_BLOB                  :empty_blob()                               :二进制函数，大对象函数 ，产生并返回一个新的 blob 对象。
ENCODE                      :encode(data bytea,format text)             :字符串函数 ，将二进制数据 data 编码成一个文本表达。 format 支持的格式有：base64 、 hex、escape。 escape 将零字节和高位组字节转换为八进制序列（nnn）和双写的反斜线
GET_BIT                     :get_bit(string, offset)                        :二进制串函数，从二进制串中抽取 offset 指定的位。 get_bit 在每一个字节中从右边起计数位；例如位 0 是第一个字节的最低有效位，而位 15 是第二个字节的最高有效位。 除了可以用于二进制串之外，也可以用于位串， 当使用于一个位串时，函数将串的第一（最左）位计数为位 0。
GET_BYTE                    :get_byte(string, offset)   :二进制串函数，从二进制串中抽取 offset 指定的字节。把一个二进制串中的一个字节计数为字节 0。。 除了可以用于二进制串之外，也可以用于位串， 当使用于一个位串时，函数将串的第一（最左）位计数为位 0。
LENGTH                      :length(string)                 :函数返回的LENGTH长度char。LENGTH使用输入字符集定义的字符计算长度。LENGTHB使用字节而不是字符。LENGTHC使用 Unicode 完整字符。LENGTH2使用 UCS2 代码点。LENGTH4使用 UCS4 代码点。
MD5                         :md5(string)                                    :MD5用于计算给定参数的MD5哈希值，结果以十六进制输出。
OCTET_LENGTH                :octet_length(string)                           :函数返回以字节计的数据字符表达的长度,字符串尾部空格字符也会被计算在内。
OVERLAY                     :overlay(string placing  string from  int [for int]):将用字符串expr1中指定起始位(from后的数值）开始后的(指定长度，for后的数值)字符串，用给定的字符串expr2替换。
POSITION                    :position(substring in string)      :返回指定子串的位置
SHA224                      :sha224(bytea)              :SHA224用于计算二进制字符串的SHA-224哈希值。
SHA256                      :sha256(bytea)              :SHA256用于计算二进制字符串的SHA-256哈希值。
SHA384                      :sha384(bytea)              :SHA384用于计算二进制字符串的SHA-384哈希值。
SHA512                      :sha512(bytea)              :SHA512用于计算二进制字符串的SHA-512哈希值。
SUBSTRING                   :substring(string [from int]  [for int])    :这些SUBSTR函数返回 的一部分char，从字符开始position，substring_length字符长。SUBSTR使用输入字符集定义的字符计算长度。SUBSTRB使用字节而不是字符。SUBSTRC使用 Unicode 完整字符。SUBSTR2使用 UCS2 代码点。SUBSTR4使用 UCS4 代码点。
TRIM                                    :TRIM([{LEADING|TRAILING|BOTH[ trim_character]} | trim_character FROM ] trim_source)   :TRIM使您能够从字符串中修剪前导字符或尾随字符（或两者）。如果trim_characterortrim_source是字符文字，则必须将其括在单引号中。
[模式匹配函数]
REGEXP_REPLACE              :regexp_replace(source,  pattern, replacement [, match_param])   :regexp_replace函数替换匹配一个POSIX正则表达式的子串。 source为输入源字符串，pattern为正则表达式，replacement是用来替换的字符串， match_param可以改变匹配规则，其参数如下： i：大小写不敏感 c：大小写敏感 m：和n是一样的，加上‘m’后，“.”与“n”不匹配；插入符号（ ^）和美元符号（）分别解释为源字符串中任何位置的任何行的开头和结尾，而不仅仅是整个源字符串的开头或结尾。n：“n”敏感，加上‘n′后，“.”与“n”不匹配；插入符号（）和美元符号（
REGEXP_MATCH                :regexp_match( source, pattern [,match_param])          :regexp_match函数返回一个POSIX正则表达式与source的第一个匹配得到的子串。source为输入源字符串，pattern为正则表达式，match_param可以改变匹配规则，其参数如下： i：大小写不敏感 c：大小写敏感 m：和n是一样的，加上‘m’后，“.”与“n”不匹配；插入符号（ ^）和美元符号（）分别解释为源字符串中任何位置的任何行的开头和结尾，而不仅仅是整个源字符串的开头或结尾。n：“n”敏感，加上‘n′后，“.”与“n”不匹配；插入符号（）和美元符号（
REGEXP_MATCH                :regexp_match( source, pattern [,match_param])          :regexp_matches函数返回一个POSIX正则表达式与source的匹配得到的子串(可能有多个)。source为输入源字符串，pattern为正则表达式，match_param可以改变匹配规则，其参数如下： i：大小写不敏感 c：大小写敏感 m：和n是一样的，加上‘m’后，“.”与“n”不匹配；插入符号（ ^）和美元符号（）分别解释为源字符串中任何位置的任何行的开头和结尾，而不仅仅是整个源字符串的开头或结尾。n：“n”敏感，加上‘n′后，“.”与“n”不匹配；插入符号（）和美元符号（
REGEXP_SPLIT_TO_TABLE       :regexp_split_to_table(source,  pattern, [, match_param])    :regexp_split_to_table函数使用一个POSIX正则表达式作为分隔符划分source来生成表格。 source为输入源字符串，pattern为正则表达式, match_param可以改变匹配规则。
REGEXP_SPLIT_TO_ARRAY       :regexp_split_to_array(source,  pattern, [, match_param])    :regexp_split_to_array函数使用一个POSIX正则表达式作为分隔符划分source来生成数组。 source为输入源字符串,pattern为正则表达式, match_param可以改变匹配规则。
[数据类型格式化函数]
TO_CHAR(BFILE|BLOB)                     :TO_CHAR(bfile|blob)                                :将数据BFILE或BLOB数据转换为数据库字符集。返回的值始终是VARCHAR。如果返回的值太大而无法适应VARCHAR数据类型，则数据将被截断。
TO_CHAR(CHARACTER)                      :TO_CHAR(character)                                 :将NCHAR、NVARCHAR、CLOB或NCLOB数据转换为数据库字符集。返回的值始终是 VARCHAR。
TO_CHAR(DATETIME)                       :TO_CHAR(datetime)                                  :将 DATE,TIMESTAMP,TIMESTAMP WITH TIME ZONE ,TIMESTAMP WITH LOCAL TIME ZONE , INTERVAL DAY TO SECOND或INTERVAL YEAR TO MONTH数据类型转换为VARCHAR数据类型的值，该数据类型的格式由DATE类型的fmt指定
TO_DATE                                 :TO_DATE(char[ DEFAULT return_value ON CONVERSION ERROR ][,fmt[,'nlsparam']])        :TO_DATE转换char为DATE数据类型的值。
TO_DATETIME                             :to_datetime(datetimetxt, fmt) return datetime.  :TO_DATETIME转换char为DATETIME数据类型的值。
TO_NUMBER                               :TO_NUMBER(expr[ DEFAULT return_value ON CONVERSION ERROR ][,fmt[,'nlsparam']])      :TO_NUMBER转换expr为NUMBER数据类型的值。
TO_TIMESTAMP                            :to_timestamp (double precision )           :把 Unix 时间（从 1970-01-01 00:00:00+00 开始的 秒）转换成 timestamp。 返回值类型为time stamp without time zone
TO_TIMESTAMP_TZ                         :to_timestamp_tz(double precision )         :把 Unix 时间（从 1970-01-01 00:00:00+00 开始的 秒）转换成 timestamp。 返回值类型为time stamp with time zone
[时间日期函数]
AGE                         :age(timestamp, timestamp)  :减去参数生成一个年、月不包含日的格式化结果。当只有一个参数时减去 current_date (午夜时间)。
CLOCK_TIMESTAMP             :clock_timestamp()                          :日期/时间函数，返回当前日期和时间（在语句执行期间变化）。
CURRENT_DATE                :current_date()                                 :current_date以数据类型的公历中的值返回会话时区中的当前日期DATE。
CURRENT_TIME                :current_time(precision)                        :根据 precision 指定的精度参数，返回带有时区的时间。
CURRENT_TIMESTAMP           :current_timestamp(precision)                   :CURRENT_TIMESTAMP以数据类型的值返回会话时区中的当前日期和时间TIMESTAMP WITH TIME ZONE。时区偏移反映了 SQL 会话的当前本地时间。如果省略precision，则默认值为6。此函数与返回值的区别在于LOCALTIMESTAMP返回值。 CURRENT_TIMESTAMPTIMESTAMP WITH TIME ZONELOCALTIMESTAMPTIMESTAMP在可选参数中，precision指定返回的时间值的小数秒精度。
DATE_PART                   :date_part(text,timestamp)                                  :获取子域， date_part 函数等价于SQL标准函数 extract
DATE_TRUNC                  :date_trunc(field, source [, time_zone ])                   :date_trunc 函数在概念上和用于数字的 trunc 函数类似。 ``source`` 是类型 timestamp 、 timestamp with time zone 或 interval 的 值表达式（类型 date 和 time 的值都分别被自动转换成 timestamp 或者 interval ）。 ``field`` 选择对输入值选用什么样的精度进行截断。返回值的类型类似于 timestamp 、 timestamp with time zone , 或 interval ，并且所有小于选定的精度的域都设置为零（或者一，对于日期和月份）。
DAYS_BETWEEN                :days_between(date1,date2)                                  :返回date1和date2两个日期之间的天数
EXTRACT                     :EXTRACT(field FROM source)                             :时间函数:EXTRACTVALUE
ISFINITE                    :isfinite(date)                                 :判断传入参数是否为有限值。
JUSTIFY_DAYS                :justify_days(interval)                                     :时间函数，调整间隔，使30天时间段表示为月 。
JUSTIFY_HOURS               :justify_hours(interval)                                    :时间函数，调整间隔，使24小时时间段表示为日 。
JUSTIFY_INTERVAL            :justify_interval(interval)                                 :时间函数，使用 justify_days 和 justify_hours 调整间隔，并进行额外的符号调整。
LOCALTIME                   :localtime                      :获取当前时间。
LOCALTIMESTAMP              :localtimestamp()               :获取当前时间戳。
MAKE_DATE                   :make_date(year int, month int, day int)        :从年，月，日域创建日期。
MAKE_INTERVAL               :make_interval(years int default 0, months int default 0, weeks int default 0, days int default 0, hours int default 0, mins int default 0, secs double default 0.0):从年，月，周，日，时， 分， 秒域创建时间间隔。
MAKE_TIME                   :make_time(hour int, min int, sec double)                                                               :从时，分，秒域创建时间。
MAKE_TIMESTAMP              :make_timestamp(year int, month int, day int, hour int, min int, sec double)                            :从年，月，日，时，分，秒域创建时间戳。
MAKE_TIMESTAMPTZ            :make_timestamptz(year int, month int, day int, hour int, min int, sec double[, timezone text])         :从年，月，日，时，分，秒，时区域创建时间戳。
MONTH                       :month(datetime date)                           :从日期时间域获取月份。
MONTHS_BETWEEN              :months_between(date date1, date date2)         :计算日期1与日期2的月份差。
NOW                         :now()                                          :获取当前时间。
ROUND                       :round(date)                                :参数为时间时
SESSIONTIMEZONE             :SESSIONTIMEZONE                                    :返回当前会话的时区。返回类型是时区偏移量（格式为字符类型'[+|-]TZH:TZM'）或时区区域名称，具体取决于用户如何在最近的ALTER SESSION语句中指定会话时区值。
STATEMENT_TIMESTAMP         :STATEMENT_TIMESTAMP ()     :STATEMENT_TIMESTAMP返回当前的日期和时间。返回类型为timestamp with time zone。
STR_VALID                   :str_valid(`expr1 text, expr2 oid)              :STR_VALID判断所给定的表达式是否为正确的日期时间。
SYSDATE                                 :SYSDATE()                                          :返回当时服务器时间。
SYS_SLEEP                               :sys_sleep(seconds)                                 :SYS_SLEEP让服务进程延时执行,seconds是一个double precision类型的值。
SYS_SLEEP_FOR                           :sys_sleep_for(interval)                            :SYS_SLEEP_FOR让服务进程延时执行,参数是一个interval,通常用于较长时间的休眠。
SYS_SLEEP_UNTIL                         :sys_sleep_until(timestamp with time zone)          :SYS_SLEEP_UNTIL使程序休眠到一个指定的时间唤醒,参数是timestamp with time zone,通常用于较长时间的休眠。
TIME_FORMAT                             :time_format(time,format)                           :time_format(time,format) 将时间串按照格式输出。格式字符串值只包含时间的小时、分钟、秒、微秒部分。其他格式字符串将返回NULL值或者0。如果时间值中的小时部分大于23，则%H和%K小时格式说明符会产生一个比通常范围0..23大的值。其他小时格式说明符会产生为模的小时值。
TIMEOFDAY                               :TIMEOFDAY()                                        :返回当时服务器时间。
TIMESUB                                 :TIMESUB(head, tail)                                :返回head和tail的时间差。单位为秒。
TO_TIMESTAMP                            :to_timestamp (double precision )           :把 Unix 时间（从 1970-01-01 00:00:00+00 开始的 秒）转换成 timestamp。 返回值类型为time stamp without time zone
YEAR                                    :year(text)                                     :抽取字符串中的 年份 字段
[枚举支持函数]
ENUM_FIRST                  :enum_first(anyenum)                        :枚举函数 ，返回输入枚举类型的第一个值 。
ENUM_LAST                   :enum_last(anyenum)         :枚举函数 ，返回输入枚举类型的最后一个值 。
ENUM_RANGE                  :enum_range(anyenum)        :枚举函数 ，输入一个枚举参数时，将输入枚举类型的所有值作为一个有序的数组返回。 输入两个参数时，以一个数组返回在给定两个枚举值之间的范围。值必须来自相同的枚举类型。如果第一个参数为空，其结果将从枚举类型的第一个值开始。如果第二参数为空，其结果将以枚举类型的最后一个值结束。
[SET支持函数]
MAKE_SET(bits,oid)			:MAKE_SET(bits,oid)        :返回一个SET值（一个由’,’分隔子字符串的字符串），该值由在bits中具有相应位的字符串组成(sys_set按照setdisplayorder从小到大排序后，setlable对应的bit位为1,2,4,8,…2^63)。oid为SET类型的oid，具体见sys_set中settypid。
EXPORT_SET                  :EXPORT_SET(bits,on,off,separator,number_of_bits)       :返回一个字符串。其中对于bits值中的每个位，可以得到一个on字符串，而对于每个清零位，可以得到一个off字符串。从右到左检查bits中的比特位（从低位到高位）。字符串从左到右添加到结果中，由指定的separator分隔符分隔，默认为逗号。检查的位数由number_of_bits给出，如果大于64，则number_of_bits将被静默剪裁为64.它被视为无符号整数，因此值-1与64实际上相同。
FIND_IN_SET                 :FIND_IN_SET(str,strlist)                                                   :FIND_IN_SET(str,strlist)返回第二个参数中第一个参数的索引（位置）。如果字符串str在由N个子字符串组成的strlist中，则返回1~N范围内的值。strlist是由以’,’分隔的子字符串组成。如果str不在strlist中或strlist是空字符串，则返回0。
[几何函数]
BOUND_BOX                   :bound_box(box, box)                :几何函数，方框到外包框。
BOX                         :box(circle)                        :几何函数，根据参数不同。
CENTER                      :center(object)                 :几何函数 ，返回图形 object 的中心点。
CIRCLE                      :circle(box)                        :几何类型转换函数，将输入图形转换到圆形。
DIAMETER                    :diameter(circle)                           :几何函数 ，返回圆的直径。
HEIGHT                      :height(box) 						:几何函数，返回方框的垂直尺寸
isopen                      :isopen(path)                                   :几何函数，判断参数是否一个开放路径。
LENGTH                      :length(string)                 :函数返回的LENGTH长度char。LENGTH使用输入字符集定义的字符计算长度。LENGTHB使用字节而不是字符。LENGTHC使用 Unicode 完整字符。LENGTH2使用 UCS2 代码点。LENGTH4使用 UCS4 代码点。
LSEG                        :lseg(box)                                      :测绘点到点的线段。
RADIUS                      :radius(circle)                     :radius(circle)求取输入圆circle的半径。
[网络地址函数]
INET_SAME_FAMILY			:inet_same_family(inet, inet):判断连个地址是否同一个IP协议族。
ABBREV                      :abbrev({inet | cidr})  :缩写显示格式文本
FAMILY                      :family(inet)                                                               :返回 inet 指定的网络地址族类型，返回 4 为 IPV4 ， 6 为 IPV6。
HOST                        :host(inet)    :inet函数，抽取IP地址为文本。
HOSTMASK                    :hostmask(inet)     :inet函数，为网络地址构造主机掩码。
inet_merge                  :inet_merge(inet,inet)                                  :inet_merge 返回包括给定网络的最小网络。        :inet_same_family(inet, inet):判断连个地址是否同一个IP协议族。
[XML函数]
APPENDCHILDXML              :appendchildxml(xml_instance xml,  xpath text , value_expr xml[,namespace _text]):函数 appendchildxml 将 ``value_expr`` 提供的值作为 ``xpath`` 节点的子节点追加到 ``xml_instance`` 中。成功则返回追加后的 ``xml_instance`` 数据，失败则返回ERROR。 此函数使用前需要创建kdb_utils_function扩展。
CURSOR_TO_XML               :cursor_to_xml(cursor refcursor, count int, nulls boolean,tableforest boolean, targetns text)   :XML操作函数，把关系表的内容映射成 XML 值。它们可以被看成是 XML 导出功能
DELETEXML                   :deletexml(xml_instance xml, xpath text)    :函数 deletexml 会删除 ``xml_instance`` 实例中与 ``xpath`` 表达式匹配的节点。
EXISTSNODE                  :existsnode(text PASSING [BY { REF | VALUE }] xml [BY { REF | VALUE }])        :XML函数 existsnode 会遍历 ``xml`` 实例，判断指定节点是否存在于实例中。若存在则返回1，不存在则返回0。
EXTRACT                     :EXTRACT(field FROM source)                             :时间函数:EXTRACTVALUE
EXTRACTVALUE                :extractvalue(xml_instance xml, xpath text[, namespace _text])              :函数 extractvalue 会返回 ``xpath`` 指定的节点的值。如果节点的值是另一个节点，则不可获取，若指定节点路径存在多个相同节点，则会报错，也可通过数组形式，如：'/a/b[1]'指定返回具体节点。
INSERTCHILDXML              :insertchildxml(xml_instance xml,  xpath text, child_expr text , value_expr xml)        :函数 insertchildxml 将 ``value_expr`` 提供的值作为 ``xpath`` 指定节点的子节点插入到 ``xml_instance`` 中。成功则返回插入后的 ``xml_instance`` 数据，失败则返回ERROR。
INSERTCHILDXMLAFTER         :insertchildxmlafter(xml_instance xml,  xpath text, child_expr text , value_expr xml)   :函数 insertchildxmlafter 将 ``value_expr`` 提供的一个或多个集合元素作为 ``xpath`` 指定的目标父元素的子元素插入到 ``child_expr`` 指定的现有集合元素之后。成功则返回插入后的 ``xml_instance`` 数据，失败则返回ERROR。
INSERTCHILDXMLBEFORE        :insertchildxmlbefore(xml_instance xml,  xpath text, child_expr text , value_expr xml)  :函数 insertchildxmlbefore 将 ``value_expr`` 提供的一个或多个集合元素作为 ``xpath`` 指定的目标父元素的子元素插入到 ``child_expr`` 指定的现有集合元素之前。成功则返回插入后的 ``xml_instance`` 数据，失败则返回ERROR。
INSERTXMLAFTER              :insertxmlafter(xml_instance xml,  xpath text , value_expr xml)                         :函数 insertxmlafter 将 ``value_expr`` 提供的值插入到 ``xpath`` 指定的节点之后。成功则返回插入后的 ``xml_instance`` 数据，失败则返回ERROR。
INSERTXMLBEFORE             :insertxmlbefore(xml_instance xml,  xpath text , value_expr xml)                        :函数 insertxmlbefore 将 ``value_expr`` 提供的值插入到 ``xpath`` 指定的节点之前。成功则返回插入后的 ``xml_instance`` 数据，失败则返回ERROR。
QUERY_TO_XML                :query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)        :query_to_xml执行由参数query传递的查询并且映射结果集.
TABLE_TO_XML                            :table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)        :table_to_xml映射由参数tbl传递的命名表的内容。regclass类型接受使用常见标记标识表的字符串，包括可选的模式限定和双引号。
UPDATEXML(xml_instance,xpath, value_expr)                               :updatexml(xml_instance xml, xpath text, value_expr xml)                        :函数 updatexml 将 ``xml_instance`` 实例中 ``xpath`` 指定的节点内容替换为 ``value_expr`` 提供的值，成功则返回更新后的 ``xml_instance`` 实例，失败则返回ERROR。 此函数使用前需要创建kdb_utils_function扩展。
UPDATEXML(xml_instance, xpath, value_expr)                              :updatexml(xml_instance xml, xpath text, value_expr text)                       :函数 updatexml 将 ``xml_instance`` 实例中 ``xpath`` 指定的节点内容替换为 ``value_expr`` 提供的值，成功则返回更新后的 ``xml_instance`` 实例，失败则返回ERROR。 此函数使用前需要创建kdb_utils_function扩展。
UPDATEXML(xml_instance, xpath, value_expr, namespace)                   :updatexml(xml_instance xml, xpath text, value_expr text, namespace text)       :函数 updatexml 将 ``xml_instance`` 实例中 ``xpath`` 指定的节点内容替换为 ``value_expr`` 提供的值，成功则返回更新后的 ``xml_instance`` 实例，失败则返回ERROR。 此函数使用前需要创建kdb_utils_function扩展。
XMLCOMMENT                              :XMLCOMMENT(values_expr)                                    :XMLComment使用 的评估结果生成 XML 注释value_expr。value_expr必须解析为字符串。它不能包含两个连续的破折号（连字符）。
XMLCONCAT                               :XMLCONCAT(XMLType_instance [,...])                         :XMLConcat将一系列XMLType实例作为输入，连接每一行的一系列元素，并返回连接后的系列。XMLConcat是XMLSequence的倒数。
XMLELEMENT                              :XMLELEMENT([{ENTITYESCAPING|NOENTITYESCAPING}] {[NAME] identifier|EVALNAME value_expr} [, XML_attributes_clause] [,value_expr [[AS] c_alias]][,...])   :XMLElement获取元素名称identifier或评估元素名称EVALNAME value_expr、元素的可选属性集合以及构成元素内容的参数。它返回一个类型的实例XMLType。XMLElement类似于SYS_XMLGen，除了XMLElement可以在返回的 XML 中包含属性，但它不接受使用XMLFormat对象进行格式化。
XMLEXISTS                               :XMLEXISTS(XQuery_string [XML_passing_clause])                                          :XMLExists检查给定 XQuery 表达式是否返回非空 XQuery 序列。如果是，函数返回TRUE; 否则，它返回FALSE。该参数XQuery_string是一个文字字符串，但它可以包含您使用XML_passing_clause.
XMLFOREST                               :XMLFOREST(value_expr [as {c_alias|EVALINAME value_expr]}][,...])                       :XMLForest将其每个参数参数转换为 XML，然后返回一个 XML 片段，该片段是这些转换后的参数的串联。
XMLPI                                   :XMLPI({[NAME]idenfitier|EVALNAME value_expr} [, value_expr])                           :XMLPIidentifier使用和可选的评估结果生成 XML 处理指令value_expr。处理指令通常用于向应用程序提供与 XML 文档的全部或部分相关联的信息。应用程序使用处理指令来确定如何最好地处理 XML 文档。
XMLROOT                                 :XMLROOT(value_expr,VERSION {value_expr| NO VALUE} [,STANDALONE {YES|NO|NO VALUE}])     :XMLROOT允许您通过在现有 XML 值的 XML 根信息 (prolog) 中提供版本和独立属性来创建新的 XML 值。如果value_expr已经有序言，则数据库返回错误。如果输入为空，则函数返回空。
XMLSEQUENCE                             :XMLSEQUENCE(xml_instance xml)                                                          :XMLSEQUENCE函数接受一个xml类型的XML实例，返回一个包含所有顶层XML节点的可变数组。
XMLSERIALIZE                            :XMLSERIALIZE({DOCUMENT|CONTENT} value_expr [AS datatype][ENCODING xml_encoding_spec][VERSION string_literal] [{NO INDENT|INDENT[SIZE=number]}] [{HIDE|SHOW} DEFAULTS]) :XMLSerialize创建一个包含value_expr.返回的任何 lobXMLSERIALIZE都是只读的。
XMLTABLE                                :XMLTABLE([XML_namespaces_clause,] XQuery_string XMLTABLE_option)                       :XMLTable将 XQuery 评估的结果映射到相关的行和列。您可以使用 SQL 将函数返回的结果作为虚拟关系表进行查询。
XML_IS_WELL_FORMED                      :xml_is_well_formed(text)                                   :检查一个text串是不是一个良构的 XML，返回一个布尔结果。
XML_IS_WELL_FORMED_CONTENT              :xml_is_well_formed_content(text)                           :检查一个text串是不是一个良构的 XML，返回一个布尔结果。xml_is_well_formed_content检查良构的内容
XML_IS_WELL_FORMED_DOCUMENT             :xml_is_well_formed_document(text)                          :检查一个text串是不是一个良构的 XML，返回一个布尔结果。xml_is_well_formed_document检查一个良构的文档.
XPATH                                   :xpath(xpath, xml [, nsarray])                  :函数 xpath 在 XML 值 ``xml`` 上计算 XPath 1.0 表达式 xpath (a text value)。它返回一个 XML 值的数组，该数组对应于该 XPath 表达式产生的结点集合。如果该 XPath 表达式返回一个标量值而不是一个结点集合，将会返回一个单一元素的数组。第二个参数必须是一个良构的 XML 文档，它必须有一个单一根结点元素。该函数可选的第三个参数是一个名字空间映射的数组。这个数组应该是一个二维text数组，其第二轴长度等于2（即它应该是一个数组的数组，其中每一个都由刚好两个元素组成）。每个数组项的第一个元素是名字空间的名称（别名），第二个元素是名字空间的 URI。并不要求在这个数组中提供的别名和在 XML 文档本身中使用的那些名字空间相同（换句话说，在 XML 文档中和在 xpath 函数环境中，别名都是本地的）。
XPATH_EXISTS                            :xpath_exists(xpath, xml [, nsarray])           :函数 xpath_exists 是 xpath 函数的一种特殊形式。这个函数不是返回满足 XPath 1.0 表达式的单一 XML 值，它返回一个布尔值表示查询是否被满足(具体来说，它是否产生了空节点集以外的任何值)。这个函数等价于标准的 XMLEXISTS 谓词，不过它还提供了对一个名字空间映射参数的支持。
[JSON函数]
ARRAY_TO_JSON               :array_to_json(anyarray [, pretty_bool])            :把数组 anyarray 作为json数组返回，一个多维数组会成为一个数组的json数组。如果 pretty_bool 设为真，将会在数组维度之间增加换行符。
JSONB_ARRAY_ELEMENTS        :jsonb_array_elements(jsonb)                :JSON处理函数，将传入值包括空值聚集成一个JSON数组。
JSONB_ARRAY_ELEMENTS_TEXT   :jsonb_array_elements_text(jsonb)           :JSON处理函数，把一个JSON数组扩展成 text 值集合。
JSONB_ARRAY_LENGTH          :jsonb_array_length(jsonb)                  :JSON处理函数，返回最外层JSON数组中的元素数量。
JSONB_BUILD_ARRAY           :jsonb_build_array( VARIADIC "any")         :JSON处理函数，将可变参数列表构造成一个可能包含不同数据类型的JSON数组。
JSONB_BUILD_OBJECT          :jsonb_build_object( VARIADIC "any")        :JSON处理函数，将可变参数列表构造成一个JSON 对象，通过转换，该参数列表由交替出现的键和值构成。
JSONB_EACH                  :jsonb_each(jsonb)                          :JSON处理函数，扩展最外层的JSON对象成为一组键值对。
JSONB_EACH_TEXT             :jsonb_each_text(jsonb)                     :JSON处理函数，扩展最外层的JSON对象成为一组键值对，返回值为 text 类型。
JSONB_EXTRACT_PATH          :jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])        :JSON处理函数，返回由 path_elems 指向的JSON值（等效于 #> 操作符）。
JSONB_EXTRACT_PATH_TEXT 	:jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])	:JSON处理函数，以 text 类型返回由 path_elems 指向的JSON值（等效于 #> 操作符）。
JSONB_INSERT                :jsonb_insert(target jsonb, path text[], new_value jsonb [, insert_after boolean])        :JSON处理函数，返回被插入了 new_value 的 target 。如果 path 指定的 target 节在一个JSONB数组中， new_value 将被插入到目标之前（ insert_after 默认为false）或者之后（ insert_after 为true）。 如果 path 指定的 target 节在一个JSONB对象内，则只有当 target 不存在时才插入 new_value 。 对于面向路径的操作符来说，出现在 path 中的负整数表示从JSONB数组的末尾开始计数。
JSONB_OBJECT(text[])                        :jsonb_object(text[])                       :JSON处理函数，从文本数组中构造JSON对象。该函数必须可以使具有偶数个成员的一维数组(成员被当做交替出现的键值对)，或者是一个二维数组（每一个内部数组刚好有两个元素，可以被看做键值对）。
JSONB_OBJECT( keys text[], values text[])   :jsonb_object( keys text[], values text[])  :JSON处理函数，从文本数组中构造JSON对象。从两个独立的数组得到键/值对。在其他方面和一个参数的形式相同。
JSONB_OBJECT_AGG            :jsonb_object_agg(name, value)                              :聚集函数，将 name 和 value 对聚合成JSON对象，值可以为空，名字不能为空。
JSONB_OBJECT_KEYS           :jsonb_object_keys(jsonb)                                   :JSON函数，返回外层JSON对象中键的集合。
JSONB_PATH_EXISTS           :jsonb_path_exists(target jsonb, path jsonpath[, vars jsonb [, silent bool]])       :JSON函数，检查JSON路径是否返回指定JSON值的任何项。
JSONB_PATH_MATCH            :jsonb_path_match(target jsonb, path jsonpath [, vars jsonb [, silent bool]])       :JSON函数，返回指定JSON值的JSON路径谓词检查的结果。只考虑结果的第一项。如果结果不是布尔值，则返回NULL.
JSONB_PATH_QUERY            :jsonb_path_query(targetjsonb, path jsonpath [, vars jsonb [, silent bool]])        :JSON函数，获取指定JSON值的JSON路径返回的所有项.
JSONB_PATH_QUERY_ARRAY       :jsonb_path_query_array(target jsonb, path jsonpath[, vars jsonb [, silent bool]]):JSON函数，获取指定JSON值的JSON路径返回的所有项，并将结果包装到数组中。
JSONB_PATH_QUERY_FIRST       :jsonb_path_query_first(targetjsonb, path  jsonpath [, vars jsonb [, silent bool]]):JSON函数，获取指定JSON值的JSON路径返回的第一个JSON项。在没有结果时返回NULL。
JSONB_POPULATE_RECORD       :jsonb_populate_record(base anyelement,from_json jsonb)     :JSON函数，扩展 from_json 中的对象成一个行，它的列匹配由 base 定义的记录类型。
JSONB_POPULATE_RECORDSET    :jsonb_populate_recordset(base anyelement,from_json jsonb)  :JSON函数，扩展 from_json 中最外层的对象数组成一个集合，它的列匹配由 base 定义的记录类型。
JSONB_PRETTY                :jsonb_pretty(from_json jsonb)                              :JSON函数，把 from_json 处理成一段带缩进的JSON文本。
JSONB_SET                   :jsonb_set(target jsonb, path text[],new_value jsonb[, create_missing boolean]):JSON函数，返回 target 其中由 path 指定的节用 new_value 替换，如果指定的项不存在并且 create_missing 为真（默认为真）则加上 new_value 。 正如面向路径的操作符一样，出现在 path 中的负整数表示从JSON数组的末尾开始数
JSONB_STRIP_NULLS           :jsonb_strip_nulls(from_json jsonb)                         :JSON函数，返回 from_json ，其中所有具有空值的对象域都被过滤掉，其他空值不动。
JSONB_TO_RECORD             :jsonb_to_record(jsonb)                                     :JSON函数，从一个JSON对象构建一个任意的记录，正如所有返回 record 的函数一样，调用者必须用一个 AS 子句显式的定义记录的结构。
JSONB_TO_RECORDSET          :jsonb_to_recordset(json)                                   :JSON函数，从一个JSON对象数组构建一个任意的记录集合，正如所有返回 record 的函数一样，调用者必须用一个 AS 子句显式的定义记录的结构。
JSONB_TYPEOF                :jsonb_typeof(json)                                         :JSON函数，把最外层的JSON对象类型作为一个文本串返回。可能类型是： object 、 array 、 string 、 number 、 boolean 以及 null 。
JSON                        :json (expression [ FORMAT JSON [ ENCODING UTF8 ] ][ { WITH | WITHOUT } UNIQUE [ KEYS ] ][ RETURNING json_data_type ])        :JSON函数，使用JSON数据类型构造函数来解析文档的JSON输入（标量、对象或者数组），返回一个JSON类型的实例。
JSON_ARRAY(value_expression)    :JSON_ARRAY ([ { value_expression [ FORMAT JSON ] } [, ...] ][ { NULL | ABSENT } ON NULL ][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])       :JSON处理函数，函数通过SQL或者JSON数据构建一个JSON数组。
JSON_ARRAY(query_expression)    :JSON_ARRAY ([ query_expression ][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])       :JSON处理函数，函数通过SQL或者JSON数据构建一个JSON数组。
json_array_elements             :json_array_elements(json)          :JSON处理函数，将传入值包括空值聚集成一个JSON数组。
json_array_elements_text        :json_array_elements_text(json)     :JSON处理函数，把一个JSON数组扩展成 text 值集合。
json_array_length               :json_array_length(json)            :JSON处理函数，返回最外层JSON数组中的元素数量。
JSON_ARRAYAGG                   :JSON_ARRAYAGG ([ value_expression ][ ORDER BY sort_expression ][ { NULL | ABSENT } ON NULL ][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])        :JSON处理函数，函数将提供的JSON数据聚合到JSON数组中。
JSON_BUILD_ARRAY                :json_build_array( VARIADIC "any")              :JSON处理函数，将可变参数列表构造成一个可能包含不同数据类型的JSON数组。
JSON_BUILD_OBJECT               :json_build_object( VARIADIC "any")             :JSON处理函数，将可变参数列表构造成一个JSON 对象，通过转换，该参数列表由交替出现的键和值构成。
JSON_EACH                       :json_each(json)                                :JSON处理函数，扩展最外层的JSON对象成为一组键值对。
JSON_EACH_TEXT                  :json_each_text(json)                           :JSON处理函数，扩展最外层的JSON对象成为一组键值对，返回值为 text 类型。
JSON_EQUAL                      :json_equal( expr ,expr [{error|false|true} on error ])                 :JSON处理函数，用于判断输入的两个文本值是否相等，前提是两个文本必须是有效的JSON值，否则返回false，当都为有效JSON值且相等则返回true，否则返回false。
JSON_EXISTS                     :json_exists(context_item, path_expression[ PASSING { value AS varname }[, ...]][ RETURNING data_type ][ { TRUE | FALSE | UNKNOWN | ERROR } ON ERROR ])           :使用表达式JSON_EXISTS用于从一个输入的json文本中检索指定的jsonpath路径是否存在指定的JSON值,如果存在返回true，不存在返回false。
JSON_EXTRACT_PATH               :json_extract_path(from_json json, VARIADIC path_elems text[])          :JSON处理函数，返回由 path_elems 指向的JSON值（等效于 #> 操作符）。
JSON_EXTRACT_PATH_TEXT          :json_extract_path_text(from_json json, VARIADIC path_elems text[])     :JSON处理函数，以 text 类型返回由 path_elems 指向的JSON值（等效于 #> 操作符）。
JSON_OBJECT(text[])                         :json_object(text[])                                        :JSON处理函数，从文本数组中构造JSON对象。该函数必须可以使具有偶数个成员的一维数组(成员被当做交替出现的键值对)，或者是一个二维数组（每一个内部数组刚好有两个元素，可以被看做键值对）。
JSON_OBJECT( keys text[], values text[])    :json_object( keys text[], values text[])                   :JSON处理函数，从文本数组中构造JSON对象。从两个独立的数组得到键/值对。在其他方面和一个参数的形式相同。
JSON_OBJECT( key_expression,value_expression)    :json_object ([ { key_expression { value | ':' } value_expression [ format json [ encoding utf8 ] ] }[, ...] ][ { null | absent } on null ][ returning data_type [ format json [ encoding utf8 ] ] ][ { with | without } unique [ keys ] ]):JSON处理函数，从文本数组中构造JSON对象。从两个独立的数组得到键/值对。在其他方面和一个参数的形式相同。
JSON_OBJECT_AGG                     :json_object_agg(name, value)   :聚集函数，将 name 和 value 对聚合成JSON对象，值可以为空，名字不能为空。
JSON_OBJECT_KEYS                    :json_object_keys(json)         :JSON函数，返回外层JSON对象中键的集合。
JSON_OBJECTAGG({WITH | WITHOUT } UNIQUE [ KEYS ] ][ RETURNING data_type])                       :json_objectagg([ { key_expression { VALUE | ':' } value_expression } ][ { NULL | ABSENT } ON NULL ][ { WITH | WITHOUT } UNIQUE [ KEYS ] ][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])                :聚集函数，把键值对聚集成一个JSON对象。
JSON_OBJECTAGG([ RETURNING data_type]{WITH | WITHOUT } UNIQUE [ KEYS ] ])                       :json_objectagg([ { key_expression { VALUE | ':' } value_expression } ][ { NULL | ABSENT } ON NULL ][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ][ { WITH | WITHOUT } UNIQUE [ KEYS ] ])                :聚集函数，把键值对聚集成一个JSON对象。
JSON_POPULATE_RECORD        :json_populate_record(base anyelement,from_json json)               :JSON函数，扩展 from_json 中的对象成一个行，它的列匹配由 base 定义的记录类型。
JSON_QUERY                  :json_query ( expression [FORMAT JSON [ENCODING UTF8]],JSON_basic_path_expression [ PASSING { value AS varname } [, ...]][ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ][ { WITHOUT | WITH { CONDITIONAL | [UNCONDITIONAL] } } [ ARRAY ] WRAPPER ][ { KEEP | OMIT } QUOTES [ ON SCALAR STRING ] ][{ERROR|NULL|EMPTY|EMPTY ARRAY|EMPTY OBJECT|DEFAULT expression } ON EMPTY ][{ERROR|NULL|EMPTY|EMPTY ARRAY|EMPTY OBJECT|DEFAULT expression } ON ERROR ])   :JSON函数，用于从一个输入的json文本中根据指定的jsonpath路径检索所需的值（可以为标量值，也可以为对象或者数组）。
JSON_SCALAR                 :json_scalar (expression[ RETURNING json_data_type ])               :JSON函数，使用JSON_SCALAR函数从SQL数据生成JSON标量值。
JSON_SERIALIZE              :json_serialize (   expression [ FORMAT JSON [ ENCODING UTF8 ] ]   [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ] )  :JSON函数，表达式用于把JSON类型的数据转换为字符串或二进制字符串。返回值可以是任意字符串类型或二进制字符串类型。
JSON_STRIP_NULLS            :json_strip_nulls(from_json json)           :JSON函数，返回 from_json ，其中所有具有空值的对象域都被过滤掉，其他空值不动。
JSON_TABLE                  :json_table (context_item, path_expression [ AS json_path_name ] [ PASSING { value AS varname } [, ...] ] COLUMNS ( json_table_column [, ...] )   [PLAN ( json_table_plan ) |PLAN DEFAULT ( { INNER | OUTER } [ , { CROSS | UNION } ] | { CROSS | UNION } [ , { INNER | OUTER } ] )   ] [{ERROR | EMPTY} ON ERROR] )   :JSON函数，查询JSON数据并将结果显示为关系视图，可以作为常规SQL表访问。只能在SELECT语句的FROM子句中使用json_table。
JSON_TO_RECORD              :json_to_record(json)                       :JSON函数，从一个JSON对象构建一个任意的记录，正如所有返回 record 的函数一样，调用者必须用一个 AS 子句显式的定义记录的结构。
JSON_TO_RECORDSET           :json_to_recordset(json)                    :JSON函数，从一个JSON对象数组构建一个任意的记录集合，正如所有返回 record 的函数一样，调用者必须用一个 AS 子句显式的定义记录的结构。
JSON_TYPEOF                 :json_typeof(json)                          :JSON函数，把最外层的JSON对象类型作为一个文本串返回。可能类型是： object 、 array 、 string 、 number 、 boolean 以及 null 。
JSON_VALUE                  :json_value(expression [ format json [ encoding utf8 ] ], json_basic_path_expression [returning json_value_return_type] [{ null|error|default literal}  on error]   [{ null|error|default literal}  on empty] )                       :JSON函数，从一段给定的json文本中获取所需要的值，返回为标量值或者用户自定义的object或者collection类型 。
ROW_TO_JSON                 :row_to_json(record [, pretty_bool])                :把行作为一个 JSON对象返回。如果pretty_bool为真，将在第1层元素之间增加换行。
TO_JSON                                 :to_json(anyelement)            :to_json(anyelement) 把该值返回为json。数组和组合会被（递归）转换成数组和对象；对 于不是数组和组合的值，如果有从该类型到json的造型，造型函数将被用来执行该 转换 ；否则将产生一个标量值。对于任何不是数字、布尔、空值的标量类型， 将使用文本表达 ，在这种风格下它是一个合法的
TO_JSONB                                :to_jsonb(anyelement)           :把该值返回为jsonb 。数组和组合会被（递归）转换成数组和对象；对 于不是数组和组合的值，如果有从该类型到json的造型，造型函数将被用来执行该 转换 ；否则将产生一个标量值。对于任何不是数字、布尔、空值的标量类型， 将使用文本表达 ，在这种风格下它是一个合法的
[序列操作函数]
CURRVAL                     :currval(regclass)                              :序列操作函数，返回最近一次用 nextval 获取的指定序列的值 。
LASTVAL                     :lastval()                      :LASTVAL返回最近一次使用的nextval获取的任何序列的值。
NEXTVAL                     :nextval(regclass)                              :NEXTVAL递增序列并返回新值。
SETVAL                      :SETVAL(regclass, bigint)                           :设定指定序列的当前值。
[数组函数]
ARRAY_APPEND                :array_append(anyarray, anyelement)         :向数组 anyarray 末端追加元素 anyelement
ARRAY_CAT                :array_cat(anyarray1, anyarray2)        :连接两个数组
ARRAY_DIMS                  :array_dims(anyarray)        :返回数组维度的文本表示
ARRAY_FILL                  :array_fill(anyelement, int[], int[])        :返回一个用指定值和指定维度初始化后的数组。
ARRAY_LENGTH                :array_length(anyarray,int)        :返回数组指定维度的长度。
ARRAY_LOWER                 :array_lower(anyarray, int)        :返回数组指定维度下界
ARRAY_NDIMS                 :array_ndims(anyarray)        :返回数组维度数
ARRAY_POSITION              :array_position(anyarray, anyelement[, int])        :返回数组中 anyelement 第一次出现的下标，如果函数第三个参数指定，那么从第三个参数指定的下标开始查找。
ARRAY_POSITIONS             :array_positions(anyarray, anyelement)              :返回数组 anyarray 中出现 anyelement 的下标组成的数组。
ARRAY_PREPEND               :array_prepend(anyelement, anyarray)                :向数组头部插入元素
ARRAY_REMOVE                :array_remove(anyarray, anyelement)                 :从数组 anyarray 中移除值为 anyelement 的元素
ARRAY_REPLACE               :array_replace(anyarray, anyelement1, anyelement2)  :将数组 anyarray 中值为anyelement1的元素替换为anyelement1。
ARRAY_TO_STRING             :array_to_string(anyarray, text [, text])           :使用指定的分隔符和可选的空字符串连接数组元素
ARRAY_UPPER                 :array_upper(anyarray, int)                         :返回数组指定维度上界
CARDINALITY                 :cardinality(anyarray)                          :数组函数，返回数组中元素总数，如果数组为空则返回0。
STRING_TO_ARRAY             :STRING_TO_ARRAY(expr1,delimiter [,null_expr])  :使用提供的分隔符将和可选的空串字符划分成数组元素。
UNNEST                                  :UNNEST( array_expression [, ... ] ) [WITH ORDINALITY] [[AS] table_alias [(column_alias [, ... ])]]             :特殊的表函数UNNEST可以使用任意数量的数组参数， 它会返回对应的列数。
[范围函数]
ISEMPTY                     :isempty(anyrange)                                                                      :判断范围 anyrange 是否为空。
LOWER                       :lower(string)                  :LOWER返回char，所有字母小写。char可以是任何数据类型CHAR, VARCHAR, NCHAR, NVARCHAR, CLOB, 或NCLOB. 返回值与 的数据类型相同char。数据库根据为基础字符集定义的二进制映射设置字符的大小写。对于语言敏感的小写，请参阅NLS_LOWER。
LOWER_INC                   :lower_inc(anyrange)            :函数测试一个范围值的下界
LOWER_INF                   :lower_inf(anyrange)            :函数测试一个范围值的下界是否无限
RANGE_MERGE                 :range_merge(anyrange,anyrange)     :返回包含两个给定范围的最小范围。
UPPER                                   :UPPER(char)                        :UPPER返回所有字母大写。char可以是任何数据类型CHARACTER VARYING(N [CHAR | BYTE])、VARCHAR(N [CHAR | BYTE])、CHARACTER(N [CHAR | BYTE])、CHAR(N [CHAR | BYTE])、TEXT、CLOB或NCLOB，返回值与char的数据类型相同。非字符串类型作为upper函数的输入，默认隐式转换为text类型，返回类型为text。数据库根据为基础字符集定义的二进制映射设置字符的大小写。对于语言敏感的大写，请参阅NLS_UPPER。
[AggregateFunctions]
missing: STDDEV_SAMP
ARRAY_AGG                   :array_agg(expression)                      :当参数为非数组类型时， array_agg 将输入值(包括空值)连接到一个数组，返回参数类型的数组。 当参数为数组类型时， array_agg 将输入数组串接到一个更高维度的数组中，并返回一个与参数数据类型相同的数组。输入数组必须具有相同维度，并且不能为空或者NULL。
AVG                         :avg(expression)                    :AVG返回expr的平均值。
BIT_AND                     :bit_and(expression)                :聚集函数，计算所有非空值按位与。如果没有非空值传入，返回空值。
BIT_OR                      :bit_or(expression)                 :聚集函数，对输入的非空值按位或运算，如果没有输入非空值，则返回空值。
BOOL_AND                    :bool_and(expression)               :聚集函数，求逻辑与，如果所有输入值为真则结果为真，否则为假。
BOOL_OR                     :bool_or(expression)                :聚集函数，求逻辑或，如果有输入值为真则结果为真，否则为假。
CORR                        :corr(y,x)              :CORR返回一组数字对的相关系数。您可以将其用作聚合或分析函数。
COUNT                       :count(expr)            :count 返回查询返回的行数。您可以将其用作聚合或分析函数。
COVAR_POP                   :covar_pop(Y, X)        :covar_pop返回一组数字对的总体协方差。您可以将其用作聚集或分析函数。
COVAR_SAMP                  :covar_samp(Y, X)       :COVAR_SAMP返回一组数字对的样本协方差。您可以将其用作聚合或分析函数。
EVERY                       :every(expression)          :等价于 bool_and
FIRST                       :MIN | MAX | SUM | AVG | COUNT | VARIANCE | STDDEV KEEP ( DENSE_RANK FIRST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [ , … ] ) [ OVER ( [ PARTITION BY expr [ , … ] |PARTITION BY ( expr [ , … ] ) ] ) ] [ FILTER ( WHERE filter_clause ) ]  :FIRST 既是聚集函数，也是分析函数。 FIRST 函数首先对输入行按指定排序规则排序，然后返回排名为FIRST的一组行，最后在返回行的数值上执行聚集计算。如果只有唯一的排名为FIRST的返回行，那么聚集操作只在非聚集的唯一行上执行。
json_agg                    :json_agg(expression)                    	:聚集函数，将传入值包括空值聚集成一个JSON数组。
JSON_OBJECT_AGG            	:json_object_agg(name, value)   			:聚集函数，将 name 和 value 对聚合成JSON对象，值可以为空，名字不能为空。
JSONB_AGG                   :jsonb_agg(expression)                      :聚集函数，将传入值包括空值聚集成一个JSON数组。
JSONB_OBJECT_AGG            :jsonb_object_agg(name, value)                              :聚集函数，将 name 和 value 对聚合成JSON对象，值可以为空，名字不能为空。
LAST                        :LAST( DENSE_RANK LAST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [ , … ] )[ OVER ( [ query_partition_clause ] ) ][ FILTER ( WHERE filter_clause ) ]:LAST 既是聚集函数，也是分析函数。 LAST 函数首先对输入行按指定排序规则排序，然后返回排名为LAST的一组行，最后在返回行的数值上执行聚集计算。如果只有唯一的排名为LAST的返回行，那么聚集操作只在非聚集的唯一行上执行。
LISTAGG                     :listagg (measure_expr[,’delimiter’]) WITHIN GROUP (order_by_clause) [OVER query_partition_clause]  :对于指定的度量值，LISTAGG函数在ORDER BY子句中指定的每个组中对数据进行排序，然后连接度量值列的值。 可作为单个集合聚集函数、分组聚集函数、分析函数在不同应用场景中使用。
MAX                         :max(expression)                                :MAX返回 的最大值expression。您可以将其用作聚合或分析函数。
MIN                         :min(expression)                                :MIN返回expr的最小值。您可以将其用作聚合或分析函数。
STDDEV                      :STDDEV(expr)               :STDDEV返回一组数字expr的样本标准差。这是一组数字，您可以将其用作聚合函数和分析函数。它与STDDEV_SAMP的不同之处在于，当只有一行输入时STDDEV返回零，而STDDEV_SAMP返回null不同。
STDDEV_POP                  :STDDEV_POP(expr)           :STDDEV_POP计算总体标准差并返回总体方差的平方根。您可以将其用作聚合函数和分析函数。
STDDEV_SAMP					:STDDEV_SAMP(expr[ over (analytic_clause)])	:STDDEV_SAMP计算累积样本标准差并返回样本方差的平方根。您可以将其用作聚合函数和分析函数。
STRING_AGG                  :string_agg(expr1, delimiter)                   :非空输入连接成一个串，用delimiter分隔。
SUM                         :sum(expression)                            :SUM返回非空输入值的和。
VAR_POP                                 :var_pop(expression)                :VAR_POP在丢弃该集合中的空值后返回输入值的总体方差。您可以将其用作聚合函数和分析函数。
VAR_SAMP                                :var_samp(expression)               :VAR_SAMP在丢弃该集合中的空值后返回一组数字的样本方差。您可以将其用作聚合函数和分析函数。
VARIANCE                                :variance([distinct | all] expr) [over (analytic_clause)])   :VARIANCE返回 expr的方差。您可以将其用作聚合或分析函数。
WM_CONCAT                               :wm_concat(column)                                          :WM_CONCAT实现column字段合并(此函数使用前需要创建kdb_utils_function扩展)。
XMLAGG                                  :XMLAGG(XMLType_instance [order_by_clause])                 :XMLAgg是一个聚合函数。它接受一组 XML 片段并返回一个聚合的 XML 文档。从结果中删除任何返回 null 的参数。
[窗口函数]
DENSE_RANK 					:DENSE_RANK()	:通用窗口函数，返回不带间隙的当前行排名。
CUME_DIST                   :cume_dist()            :CUME_DIST计算一组值中某个值的累积分布。返回值的范围CUME_DIST是 >0 到 <=1。领带值始终评估为相同的累积分布值。
FIRST                       :MIN | MAX | SUM | AVG | COUNT | VARIANCE | STDDEV KEEP ( DENSE_RANK FIRST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [ , … ] ) [ OVER ( [ PARTITION BY expr [ , … ] |PARTITION BY ( expr [ , … ] ) ] ) ] [ FILTER ( WHERE filter_clause ) ]  :FIRST 既是聚集函数，也是分析函数。 FIRST 函数首先对输入行按指定排序规则排序，然后返回排名为FIRST的一组行，最后在返回行的数值上执行聚集计算。如果只有唯一的排名为FIRST的返回行，那么聚集操作只在非聚集的唯一行上执行。
FIRST_VALUE                 :first_value(value any)         :返回在窗口帧中第一行上计算的 value 。只考虑“窗口帧”内的行，它默认情况下包含从分区的开始行直到当前行的最后一个同等行。
LAG                         :lag(value anyelement[, offset integer [,default anyelement ]])         :返回value，它在分区内当前行的之前offset个位置的行上计算；如果没有这样的行，返回default替代（必须和value类型相同）。offset和default都是根据当前行计算的结果。如果忽略它们，则offset默认是1，default默认是空值。
LAST                        :LAST( DENSE_RANK LAST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [ , … ] )[ OVER ( [ query_partition_clause ] ) ][ FILTER ( WHERE filter_clause ) ]:LAST 既是聚集函数，也是分析函数。 LAST 函数首先对输入行按指定排序规则排序，然后返回排名为LAST的一组行，最后在返回行的数值上执行聚集计算。如果只有唯一的排名为LAST的返回行，那么聚集操作只在非聚集的唯一行上执行。
LAST_VALUE                  :last_value(value any)          :LAST_VALUE函数返回在窗口帧中的最后一行上计算的value值。类型与any一致。
LEAD                        :lead(value any, offset integer [, default any]) over ([partition by partition_expression] [order by sort_expression [ASC|DESC]])   :LEAD返回value,它在分区内当前行的之后offset个位置的行上计算结果，如果没有这样的行，返回default值替代(必须与value类型相同)。
NTH_VALUE                   :nth_value(value any, nth integer) over ([partition by partition_expression] [order by sort_expression [ASC|DESC]]) :NTH_VALUE返回在窗口帧中的第nth行(行从1计数)上计算的value,类型与any一致。如果没有这样的行则返回空值。本函数为通用窗口函数。
NTILE                       :ntile(num_buckets integer)                     :NTILE从1到num_backet参数值的整数范围，尽可能等分分区。
PERCENT_RANK(percent_rank_aggregate)                :PERCENT_RANK(expr[,...]) WITHIN GROUP (ORDER BY { expr [ DESC | ASC ] [ NULLS { FIRST | LAST }}... ])  :PERCENT_RANK类似于CUME_DIST（累积分布）函数。返回值的范围PERCENT_RANK是 0 到 1，包括 0 到 1。任何集合中的第一行的 aPERCENT_RANK为 0。返回值为NUMBER。
PERCENT_RANK(percent_rank_analytic)                 :PERCENT_RANK() OVER ( [ query_partition_clause ] order_by_clause)  :PERCENT_RANK类似于CUME_DIST（累积分布）函数。返回值的范围PERCENT_RANK是 0 到 1，包括 0 到 1。任何集合中的第一行的 aPERCENT_RANK为 0。返回值为NUMBER。
RANK(AGGREGATION)           :rank(args) WITHIN GROUP (ORDER BY sorted_args)             :RANK计算一个值在一组值中的排名。返回类型是NUMBER.
RANK(ANALYSE)               :rank() OVER ([query_partition_clause] order_by_clause)     :RANK计算一个值在一组值中的排名。返回类型是NUMBER.
RATIO_TO_REPORT             :ratio_to_report(expr1) over (query_partions_clasue)    :百分比计算函数。分子是expr的值，分母是over中的值，若over中没有指定，则分母是所有值。 expr可以是常量表达式，算术表达式，投影列表达式。且表达式expr是一个number类型或者可以隐式转换为number类型的表达式。其它类型的表达式报错。 如果expr的计算结果为NULL，则RATIO_TO_REPORT函数的计算结果也为NULL。若指定 了 query_partions_clasue，则分母是这个子句计算的值。 不能使用ratio_to_report自身或者其它windows函数作为expr参数来使用,否则报错处理。返回值类型numeric，使用默认精度与标度。
ROW_NUMBER                  :row_number() over([query_partition_clause,] order_by_clause)   :ROW_NUMBER是解析函数,用于为结果集中的每一行分配一个唯一的整数值，从1开始计数。
SUM                         :sum(expression)                            :SUM返回非空输入值的和。
[集合返回函数]
GENERATE_SERIES             :generate_series(start, stop)       :级数生成函数，产生一系列值，从 start 到 stop ，默认步长为1,当指定 step 参数时，步长为 step 。 当 ``step`` 为正时，如果 ``start`` 大于 ``stop`` 则返回零行。相反，当 ``step`` 为负时，如果 ``start`` 小于 ``stop`` 则返回零行。对于 NULL 输入也会返回零行。 ``step`` 为零是一个错误。
GENERATE_SUBSCRIPTS         :generate_subscripts(array anyarray, dim int)   :下标生成函数，生成一个级数组成给定数组的下标。当 reverse 为真时，级数以逆序返回。
[系统信息函数]
COL_DESCRIPTION             :col_description(table_oid, column_number)  :col_description 为一个表列返回注释，该表列由所在表的 OID 和它的列号指定（ obj_description 不能被用在表列，因为表列没有自己的 OID）。
CONNECTIONS                 :connections()                                              :返回数据库服务器当前的用户连接数。
CONVERT                     :convert(string bytea,src_encoding name,dest_encoding name) :字符串函数，将字符串转换为dest_encoding。原始编码由src_encoding指定。 string在这个编 码中必须可用。转换可以使用 CREATECONVERSION 定义。也有一些预定义的转换。
CURRENT_DATABASE            :current_database()                             :会话信息函数，返回当前数据库名。
CURRENT_QUERY               :current_query()                                :当前正在执行的查询的文本，和客户端提交的一样（可能包含多于一个语句）.
CURRENT_SCHEMA              :current_schema()                               :返回当前模式名 。
CURRENT_SCHEMAS             :current_schemas(boolean)                       :返回搜索路径中的模式名， boolean 参数指定是否包含隐含模式。
FORMAT_TYPE                 :format_type(type_oid, typemod)     :format_type 返回一个数据类型的 SQL 名称，它由它的类型 OID 标识并且可能是一个类型修饰符。如果不知道相关的修饰符，则为类型修饰符传递 NULL。
GETUSERNAME                 :getusername()              :返回当前用户名。
HAS_ANY_COLUMN_PRIVILEGE                :has_any_column_privilege(user, table, privilege)                   :检查 user 用户（未指定时使用当前用户）是否能以特定方式访问一个表的任意列。
HAS_COLUMN_PRIVILEGE                    :has_column_privilege(user, table, column， privilege)               :检查 user 用户（未指定时使用当前用户）是否能以特定方式访问一个表的 column 指定列。 has_column_privilege 检查一个用户是否能以特定方式访问一个列。它的参数可能性与 has_table_privilege 类似，并且列还可以使用名字或者属性号来指定。希望的访问权限类型必须是下列值的某种组合
HAS_DATABASE_PRIVILEGE                  :has_database_privilege(user, database， privilege)                  :检查 user 用户（未指定时使用当前用户）是否能以 privilege 指定方式访问 database 数据库。
HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE      :has_foreign_data_wrapper_privilege(user, fdw, privilege)           :检查``user`` 用户（未指定时使用当前用户）是否能以特定方式访问一个外部数据包装器。它的参数可能性类似于 has_table_privilege 。希望的访问权限类型必须是 USAGE 。
HAS_FUNCTION_PRIVILEGE                  :has_function_privilege(user, function， privilege)                  :检查 user 用户（未指定时使用当前用户）是否能以特定方式访问一个函数。其参数可能性类似 has_table_privilege 。在用一个文本串而不是 OID 指定一个函数时，允许的输入和 regprocedure 数据类型一样（参阅 对象标识符类型 ）。希望的访问权限类型必须是 EXECUTE 。
HAS_LANGUAGE_PRIVILEGE      :has_language_privilege(user, language， privilege)          :检查 user 用户（未指定时使用当前用户）是否可以以某种特定的方式访问一个过程语言。希望的访问权限类型必须是USAGE。
HAS_SCHEMA_PRIVILEGE        :has_schema_privilege(user, schema， privilege)              :检查 user 用户（未指定时使用当前用户）是否能以 privilege 指定方式访问 schema 。希望的访问权限类型必须是CREATE或USAGE。
HAS_SEQUENCE_PRIVILEGE      :has_sequence_privilege(user, sequence， privilege)          :检查 user 用户（未指定时使用当前用户）是否能以某种特定方式访问一个序列。
HAS_SERVER_PRIVILEGE        :has_server_privilege(user, server， privilege)              :检查 user 用户（未指定时使用当前用户）是否可以以某种特定的方式访问一个外部服务器。 希望的访问权限类型必须是CREATE或USAGE。
HAS_TABLE_PRIVILEGE         :has_table_privilege(user, table， privilege)                :检查 user 用户（未指定时使用当前用户）是否可以用某种特定的方式访问一个表。 该用户可以通过名字或者 OID （ sys_authid.oid ） 来指定，也可以用 public 表示 PUBLIC 伪角色。如果省略该参数，则使用 current_user 。 该表可以通过名字或者 OID 指定（因此，实际上有六种 has_table_privilege 的变体，我们可以通过它们的参数数目和类型来区分它们） 。如果用名字指定，那么在必要时该名字可以是模式限定的。 所希望的权限类型是用一个文本串来指定的，它必须是下面的几个值之一： SELECT 、 INSERT 、 UPDATE 、 DELETE 、 TRUNCATE 、 REFERENCES 或 TRIGGER 。 WITH GRANT OPTION 可以被选择增加到一个权限类型来测试是否该权限是使用转授选项得到。另外，可以使用逗号分隔来列出多个权限类型，在这种情况下只要具有其中之一的权限则结果为 真 （权限字符串的大小写并不重要，可以在权限名称之间出现额外的空白，但是在权限名内部不能有空白）。
HAS_TABLESPACE_PRIVILEGE    :has_tablespace_privilege(user, tablespace， privilege)      :检查 user 用户（未指定时使用当前用户）是否可以以某种特定的方式访问一个表空间。其参数可能性类似``has_table_privilege``。希望的访问权限类型必须是 CREATE 。
HAS_TYPE_PRIVILEGE          :has_type_privilege(user, type， privilege)                  :检查 user 用户（未指定时使用当前用户）是否能以特定的方式访问一种类型。其参数的可能性类同于 has_table_privilege 。在用字符串而不是 OID 指定类型时，允许的输入和 regtype 数据类型相同（见 对象标识符类型 ）。期望的访问特权类型必须等于 USAGE 。
inet_client_addr            :inet_client_addr()                                     :inet_client_addr 返回当前客户端的 IP地址。如果连接是通过 Unix域套接字进行的，返回 NULL。
inet_client_port            :inet_client_port()                                     :inet_client_port 返回当前客户端的端口号。如果连接是通过 Unix域套接字进行的，返回 NULL。
inet_server_addr                        :inet_server_addr()                                     :inet_server_addr 返回接受当前连接的服务器的 IP。如果连接是通过 Unix域套接字进行的，返回 NULL。
inet_server_port                        :inet_server_port()                                     :inet_server_port 返回接受当前连接的服务器的端口号。如果连接是通过 Unix域套接字进行的，返回 NULL。
SESSION_ID                  :session_id()                                       :SESSION_ID返回当前会话的整数。
SESSION_USER                :session_user                                       :SESSION_USER返回当前会话的用户名。返回类型为NAME。
SYS_BACKEND_PID             :sys_backend_pid()                          :SYS_BACKEND_PID返回附加到当前会话的服务器进程的进程ID。
SYS_FUNCTION_IS_VISIBLE                 :sys_function_is_visible(function_oid)                                                  :判断函数在搜索路径中是否可见。
SYS_GET_CONSTRAINTDEF                   :sys_get_constraintdef(constraint_oid)                                                  :获得对应约束的定义。pretty_bool为真则为优质打印方式。
SYS_GET_EXPR                            :sys_get_expr(sys_node_tree, relation_oid)                                              :反编译一个表达式的内部形式，假定其中的任何 Var 指向由第二个参数指示的关系。pretty_bool为真则为优质打印方式。
SYS_GET_FUNCTION_ARGUMENTS              :sys_get_function_arguments(func_oid)                                                   :获得一个函数或过程定义的参数列表（带有默认值）。
SYS_GET_FUNCTION_IDENTITY_ARGUMENTS     :sys_get_function_identity_arguments (func_oid)                                         :获得标识一个函数或过程的参数列表（不带默认值）。
SYS_GET_FUNCTION_RESULT                 :sys_get_function_result(func_oid)                                                      :获得函数的RETURNS 子句（对过程返回空）。
SYS_GET_FUNCTIONDEF                     :sys_get_functiondef(func_oid)                                                          :获得一个函数或过程的定义。
SYS_GET_INDEXDEF                        :sys_get_indexdef(index_oid)                                                            :根据参数不同。
SYS_GET_KEYWORDS                        :sys_get_keywords()                                                                     :获得 SQL 关键字的列表及其分类。
SYS_GET_OBJECT_ADDRESS                  :sys_get_object_address(type text, name text[], args text[])                            :从一个数据库对象的内部表示得到它的地址。
SYS_GET_RULEDEF                         :sys_get_ruledef(rule_oid)                                                              :重建规则的创建命令。
SYS_GET_SERIAL_SEQUENCE                 :sys_get_serial_sequence(table_name, column_name)                                       :获得一个序列列或标识列使用的序列的名称。
SYS_GET_STATISTICSOBJDEF                :sys_get_statisticsobjdef(statobj_oid)                                                  :重建一个扩展统计对象的创建命令（CREATE STATISTICS命令）。
SYS_GET_TRIGGERDEF                      :sys_get_triggerdef(trigger_oid)                                                        :重建一个触发器 的CREATE [ CONSTRAINT ] TRIGGER命令。
SYS_GET_USERBYID                        :sys_get_userbyid(role_oid)                                                             :获得给定 OID 指定的角色名。
SYS_GET_VIEWDEF                         :sys_get_viewdef(view_name)                                                             :sys_get_viewdef重构定义一个视图的SELECT查询。
SYS_HAS_ROLE                            :sys_has_role(user, role, privilege)                                                    :检查 user 用户（未指定时使用当前用户）是否能以特定的方式访问一个角色。其参数的可能性类同于 has_table_privilege 。除了 public 不允许作为一个用户名。希望的访问权限类型必须是下列值的某种组合： MEMBER 或 USAGE 。 MEMBER 表示该角色中的直接或间接成员关系（即使用 SET ROLE 的权力），而 USAGE 表示不做 SET ROLE 的情况下该角色的权限是否立即可用。
SYS_IDENTIFY_OBJECT                     :sys_identify_object(catalog_id oid, object_id oid, object_sub_id integer)              :返回一行数据，包含由参数目录OID、对象OID和一个（可能为零的）子对象ID所唯一标识的数据库对象的信息。该信息是供机器读取的，并且不会被翻译。 type 标识数据库对象的类型； schema 是该对象所属的模式名，如果对象类型不属于模式则为 NULL ；，如果需要的话，可以加上引号如果该名称（如果相关的话，还可以加上模式名）足以唯一标识该对象，则 name 就是对象的名称，必要时会被加上引号，否则为 NULL ; identity 是完整的兑现标识，它会表现为与对象类型相关的精确格式，并且如有必要，该格式中的每个部分都会被模式限定。
SYS_IDENTIFY_OBJECT_AS_ADDRESS          :sys_identify_object_as_address(catalog_id oid, object_id oid, object_sub_id integer)   :返回一行数据，包含由参数目录OID、对象OID和一个（可能为零的）子对象ID所唯一标识的数据库对象的信息。返回的信息独立于当前服务器，也就是说，它可以被用来在另一个服务器中标识一个具有相同命名的对象。 type 标识数据库对象的类型； object_names 和 object_args 是文本数组，它们一起构成了对对象的引用。这三个值可以被传递给 sys_get_object_address 以获得该对象的内部地址。这个函数是 sys_get_object_address 的逆函数。
SYS_KINGBASE_START_TIME                 :sys_kingbase_start_time()                                                              :返回服务器启动时的 timestamp with time zone 。
SYS_TABLE_IS_VISIBLE                    :sys_table_is_visible(table_oid)                    :表在搜索路径中是否可见，也可被用于视图、物化视图、索引、序列和外部表。
SYS_TABLESPACE_DATABASES                :sys_tablespace_databases(tablespace_oid)           :系统函数，获得在该表空间中所有对象的数据库OID 的集合。
SYS_TABLESPACE_LOCATION                 :sys_tablespace_location(tablespace_oid)            :系统函数，获得在该表空间所在的文件系统的路径。
TRANSACTION_TIMESTAMP                             :TRANSACTION_TIMESTAMP()                :返回当时服务器时间。
USER                                    :USER                               :USER返回会话用户（登录的用户）的名称。这可能会在数据库会话期间发生变化，因为 Real Application Security 会话被附加或分离。对于企业用户，此函数返回架构。对于其他用户，它返回数据库用户名。如果 Real Application Security 会话当前附加到数据库会话，则它返回 user XS$NULL。
VERSION                                 :VERSION                                                    :VERSION返回KingbaseES数据库版本信息，包含版本号及版本编译信息。 该函数返回一个TEXT值。
[系统管理函数]
CURRENT_SETTING             :current_setting(setting_name [, missing_ok])   :配置设定函数，获得设置的当前值。 current_setting` 得到 ``setting_name`` 设置的当前值。它对应于SQL命令 SHOW 。 如果没有名为 ``setting_name`` 的设置，除非提供 ``missing_ok`` 并且其值为 true ， current_setting 会抛出错误。
GET_DISK_INFO               :get_disk_info(file_path IN TEXT, dev OUT TEXT, mount_point OUT TEXT, size OUT TEXT, used OUT TEXT))    :指定文件系统路径，返回路径所在设备名，挂载点，单位字节的容量和已使用容量等磁盘使用信息。
SYS_CANCEL_BACKEND          :sys_cancel_backend(pid int)                :SYS_CANCEL_BACKEND用于取消对具有指定进程ID的后端进程的会话的当前查询。
SYS_COLUMN_SIZE             :sys_column_size(any)                       :SYS_COLUMN_SIZE返回用于存储任何单个数据值的字节数。
SYS_DATABASE_SIZE                       :sys_database_size({oid|name})                                              :SYS_DATABASE_SIZE返回指定名称或OID的数据库使用的总磁盘空间。返回类型为bigint。
SYS_INDEXES_SIZE                        :sys_indexes_size(regclass)                                                             : 接受一个表的 OID 或名称，并返回附加到该表的所有索引所使用的全部磁盘空间。
SYS_LS_DIR                              :sys_ls_dir(dirname text [, missing_ok boolean, include_dot_dirs boolean])              :系统函数，列出目录中的内容。默认仅限于超级用户使用，但是可以给其他用户授予Execute让他们运行这个函数。
SYS_LS_LOGDIR                           :sys_ls_logdir()                                    :系统函数，列出日志目录中文件的名称、尺寸以及最后修改时间。访问被授予给sys_monitor 角色的成员，并且可以被授予给其他非超级用户角色。
SYS_LS_TMPDIR                           :sys_ls_tmpdir()                                    :系统函数，为tablespace列出临时目录中文件的名称、大小和最后一次修改时间。 如果没有提 供tablespace，则在临时目录中的sys_default表空间被使用。sys_monitor角色的成员可以访问， 其他非超级用户角色也可以访问。
SYS_LS_WALDIR                           :sys_ls_waldir()                                    :系统函数，列出WAL目录中文件的名称、尺寸以及最后修改时间。访问被授予给sys_monitor角色 的成员，并且可以被授予给其他非超级用户角色。。
SYS_READ_BINARY_FILE                    :sys_read_binary_file(filename text [, ``offset`` bigint, ``length`` bigint [, ``missing_ok`` boolean] ])           :返回一个二进文件的内容。默认仅限于超级用户使用，但是可以给其他用户授予EXECUTE让他们运行这个函数。
SYS_READ_FILE                           :sys_read_file(filename text [, ``offset`` bigint, ``length`` bigint [, ``missing_ok`` boolean] ])                  :返回一个文件的内容。默认仅限于超级用户使用，但是可以给其他用户授予EXECUTE让他们运行这个函数。
SYS_RELATION_FILENODE                   :sys_relation_filenode(relation regclass)           :接受一个表、索引、序列或 TOAST 表的 OID 或名称，返回当前分配给它的“filenode”号。文件结点是关系的文件名的基本组件。对于大多数表结果和 sys_class.relfilenode 相同，但是对于某些系统目录 relfilenode 为零，并且必须使用此函数获取正确的值。如果传递一个没有存储的关系（如视图），此函数将返回 NULL。
SYS_RELATION_FILEPATH                   :sys_relation_filepath(relation regclass)           :返回关系的整个文件路径名（相对于数据库集簇的数据目录 KINGBASE_DATA）。
SYS_RELATION_SIZE                       :sys_relation_size(relation regclass, fork text)    :接受一个表、索引或 TOAST 表的 OID 或者名称，并且返回那个关系的一个分叉所占的磁盘空间的字节尺寸。如果只得到一个参数，它会返回该关系的主数据分叉的尺寸。提供第二个参数 可以指定要检查哪个分叉（'main'、'fsm'、'vm'或'init'）使用的磁盘空间。
SYS_RELOAD_CONF                         :sys_reload_conf()                                  :SYS_RELOAD_CONF给服务器发送一个SIGHUP信号，导致所有服务器进程重载配置文件,无参数。
SYS_SIZE_BYTES                          :sys_size_bytes(text)                               :可以被用来从人类可读格式的字符串得到其中所表示的字节数。其输入可能带有的单位包括字节、kB、MB、GB 或者 TB，并且对输入进行解析时是区分大小写的。如果没有指定单位，会假定单位为字节。
SYS_SIZE_PRETTY                         :sys_size_pretty(bigint)                            :可以用于把其它函数之一的结果格式化成一种人类易读的格式，可以根据情况使用字节、kB、MB、GB 或者 TB。
SYS_STAT_FILE                           :sys_stat_file(filename text[, ``missing_ok`` boolean])                     :返回关于一个文件/目录的统计信息。默认仅限于超级用户使用，但是可以给其他用户授予EXECUTE让他们运行这个函数。
SYS_TABLE_SIZE                          :sys_table_size(regclass)                           :接受一个表的 OID 或名称，并返回该表所需的磁盘空间，但是排除索引（TOAST 空间、空闲空间映射和可见性映射包含在内）。
SYS_TABLESPACE_SIZE                     :sys_tablespace_size(tablespace_oid)                :系统函数，获得指定OID的表空间使用的磁盘空间。
SYS_TERMINATE_BACKEND                   :sys_terminate_backend(pid int)                                                         :中止一个后端。如果调用角色是被取消后端的拥有者角色的成员或者调用角色已经被授予 sys_signal_backend，这也是允许的，不过只有超级用户才能取消超级用户的后端。
SYS_TOTAL_RELATION_SIZE                 :sys_total_relation_size (oid bigint)                                                   :指定表所用的总磁盘空间，包括所有的索引和TOAST数据